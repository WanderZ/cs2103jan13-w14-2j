//@author: a0085413j



	/**
	 * origin: ezxpns\data\NWSdata.java
	 */

 */

public class NWSdata {
	private Calendar date;
	private double targetNeedsRatio; //target needs wrt income
	private double targetWantsRatio; //target wants wrt income
	private double targetSavingsRatio; //target savings wrt income
	private double currentNeeds; //current amount of expense with ExpenseType NEED
	private double currentWants; //current amount of expense with ExpenseType WANT
	private double currentSavings;//current amount of money leftover from income after deducting currentNeeds and currentWants
	private double income; //amount of income
	private boolean state; //state of NWSdata. NWSdata is valid if state is true

	public NWSdata(Calendar date, double tN, 
			double tW, double tS, double cN,
			double cW, double cS, double ic){
		setAll(date, tN, tW, tS, cN, cW, cS, ic);
	}

	public NWSdata(){
		setAll(null, 0, 0, 0, 0, 0, 0, 0);
		state = false;
	}

	/**
	 * Sets all the attributes inside NWSdata
	 * @param date
	 * @param tN
	 * @param tW
	 * @param tS
	 * @param cN
	 * @param cW
	 * @param cS
	 * @param ic
	 */
	public void setAll(Calendar date, double tN, 
			double tW, double tS, double cN, 
			double cW, double cS, double ic){
		this.date = date;
		targetNeedsRatio = tN;
		targetWantsRatio = tW;
		targetSavingsRatio = tS;
		currentNeeds = cN;
		currentWants = cW;
		currentSavings = cS;
		income = ic;
		state = true;
	}

	/**
	 * Returns the income of NWSdata
	 * @return
	 */
	public double getIncome(){
		return income;
	}

	/**
	 * Returns the date of NWSdata
	 * @return
	 */
	public Calendar getDate(){
		return date;
	}

	/**
	 * Returns currentNeeds of NWSdata
	 * @return
	 */
	public double getCurrentNeeds(){
		return currentNeeds;
	}
	
	/**
	 * Returns currentWants of NWSdata
	 * @return
	 */
	public double getCurrentWants(){
		return currentWants;
	}
	
	/**
	 * Returns currentSavings of NWSdata
	 * @return
	 */
	public double getCurrentSavings(){
		return currentSavings;
	}



	/**
	 * Returns the targetNeedsRatio of NWSdata
	 * @return
	 */
	public double getTargetNeedsRatio(){
		return targetNeedsRatio;
	}

	/**
	 * Returns the targetWantsRatio of NWSdata
	 * @return
	 */
	public double getTargetWantsRatio(){
		return targetWantsRatio;
	}

	/**
	 * Returns the targetSavingsRatio of NWSdata
	 * @return
	 */
	public double getTargetSavingsRatio(){
		return targetSavingsRatio;
	}

	/**
	 * Returns the ratio of currentNeeds with respect to income of NWSdata. Returns 0 if income is 0
	 * @return
	 */
	public double getCurrNeedsRatio(){
		if(income==0) 
			return 0;
		else
			return currentNeeds/income;
	}

	/**
	 * Returns the ratio of currentWants with respect to income of NWSdata. Returns 0 if income is 0
	 * @return
	 */
	public double getCurrWantsRatio(){
		if(income==0) 
			return 0;
		else 
			return currentWants/income;
	}

	/**
	 * Returns the ratio of currentSavings with respect to income of NWSdata. Returns 0 if income is 0
	 * @return
	 */
	public double getCurrSavingsRatio(){
		if(income==0) 
			return 0;
		else 
			return currentSavings/income;
	}

	/**
	 * Returns true if NWSdata is valid
	 * @return
	 */
	public boolean isValid(){
		return state;
	}

	/**
	 * Returns a copy of NWSdata
	 * @return
	 */
	public NWSdata copy(){
		return new NWSdata(date, targetNeedsRatio, targetWantsRatio, 
				targetSavingsRatio, currentNeeds, currentWants, 
				currentSavings, income);
	}
}

	// End of segment: ezxpns\data\NWSdata.java





	/**
	 * origin: ezxpns\data\NWSGenerator.java
	 */

 */

public class NWSGenerator extends Storable {


	public static interface DataProvider {
		double getMonthlyExpense(ExpenseType type);

		double getMonthlyIncome();

		double getPrevMonthlyExpense(ExpenseType type); // get the previous
		// month's data

		double getPrevMonthlyIncome(); // get previous month's income
	}



	private transient DataProvider data;
	private transient boolean dataUpdated = true;

	// Ideal or default ratios
	private final double NEEDS = 0.5;
	private final double WANTS = 0.3;
	private final double SAVINGS = 0.2;

	private final double BUFFER = 0.05; // +- 5% buffer

	// 0.1<Needs<0.8
	private final double MAXNEEDS = 0.7;
	private final double MINNEEDS = 0.1;
	// 0.1<Wants<0.5
	private final double MAXWANTS = 0.5;
	private final double MINWANTS = 0.1;
	// 0.2<Savings<0.7
	private final double MAXSAVINGS = 0.7;
	private final double MINSAVINGS = 0.12;

	private NWSdata pastMonthNWS = new NWSdata();
	private NWSdata thisMonthNWS = new NWSdata();

	private transient double targetNeeds;
	private transient double targetWants;
	private transient double targetSavings;

	private transient double prevMonthNeedsExp;
	private transient double prevMonthWantsExp;
	private transient double prevMonthSavings; 

	private transient double diffFromNT;
	private transient double diffFromWT;
	private transient double diffFromST;

	public NWSGenerator(DataProvider data) {

		this.data = data;
		dataUpdated = true;
	}


	public void setDataProvider(DataProvider data) {

		this.data = data;
		dataUpdated = true;
	}


	public void markDataUpdated() {

		dataUpdated = true;
	}

	/**
	 * Updates data after deserialization
	 */
	@Override
	public void afterDeserialize() {

		if ((!thisMonthNWS.isValid()) && (!pastMonthNWS.isValid())) {
			initNWSdata();
		}

		if(isExpired(thisMonthNWS)){

			if(hasSkippedAMonth(thisMonthNWS.getDate())){ 
				initNWSdata();
			}
			else{
				setToPastMonth(thisMonthNWS);
				generateNWSRatios();
			}
		}

		else{
			updateThisMonthProgress();
		}
		markUpdate();
	}

	/**
	 * Updates NWSdata and saves it in json
	 */
	public void updateNWSdata() {
		if(pastMonthNWS.isValid()&&hasModifiedPastMonthRecords()){
			updatePastMonthProgress();
			generateNWSRatios();
		}
		else{
			updateThisMonthProgress();
		}
		markUpdate();
	}

	/**
	 * Returns a copy of NWSdata for this month
	 * 
	 * @return
	 */
	public NWSdata getNWSdataCopy() {
		if (dataUpdated) {
			updateNWSdata();
			dataUpdated = false; 
		}

		return thisMonthNWS.copy();
	}

	/**
	 * Generates and sets the ratio for NEEDS, WANTS and SAVINGS
	 * @return
	 */
	public void generateNWSRatios() {
		//check for valid pastMonthNWS
		if(!pastMonthNWS.isValid()){
			updateThisMonthProgress();
			markUpdate();
			return;
		}

		//check for zero income
		if(pastMonthNWS.getIncome()==0){
			updateThisMonthProgress();
			markUpdate();
			return;
		}


		//generates ratio
		targetNeeds = pastMonthNWS.getTargetNeedsRatio();
		targetWants = pastMonthNWS.getTargetWantsRatio();
		targetSavings = pastMonthNWS.getTargetSavingsRatio();

		prevMonthNeedsExp = pastMonthNWS.getCurrNeedsRatio(); // ratio
		prevMonthWantsExp = pastMonthNWS.getCurrWantsRatio(); // ratio
		prevMonthSavings = pastMonthNWS.getCurrSavingsRatio(); // ratio

		// difference from ____ Targets = Target ratio - Actual ratio
		diffFromNT = targetNeeds - prevMonthNeedsExp;
		diffFromWT = targetWants - prevMonthWantsExp;
		diffFromST = targetSavings - prevMonthSavings;

		int i = 0;

		/*
		 * if the difference from the target is more than 5%, we will count it
		 * as missing the target Now we will compute i, which represent the
		 * state. the value of i should be read at base 2 eg. i = 6 (in base 10)
		 * = 110 (in base 2) Needs|Wants|Savings 1 | 1 | 0 this implies that
		 * Needs and Wants did not meet the target, while Savings has met the
		 * target (<5% diff)
		 */
		if (Math.abs(diffFromNT) > BUFFER) {
			i += 4;
		}

		if (Math.abs(diffFromWT) > BUFFER) {
			i += 2;
		}

		if (Math.abs(diffFromST) > BUFFER) {
			i += 1;
		}

		switch (i) {

		case 0: // 000 
			if (hasExceededTarget(diffFromST)) {
				if (!hasExceededTarget(diffFromNT)) {
					if (canIncrease(MAXSAVINGS, targetSavings)
							&& canReduce(MINNEEDS, targetNeeds))
						targetNeeds -= BUFFER;
					targetSavings += BUFFER;
				}

				if (!hasExceededTarget(diffFromWT)) {
					if (canIncrease(MAXSAVINGS, targetSavings)
							&& canReduce(MINWANTS, targetWants)) {
						targetWants -= BUFFER;
						targetSavings += BUFFER;
					}
				}
			}
			break;

		case 1:// 001
			if (!hasExceededTarget(diffFromST)) {
				if (canReduce(MINSAVINGS, targetSavings)) {
					if (hasExceededTarget(diffFromNT)
							&& canIncrease(MAXNEEDS, targetNeeds)) {
						targetSavings -= BUFFER;
						targetNeeds += BUFFER;
					}

					else if (hasExceededTarget(diffFromWT)
							&& canIncrease(MAXWANTS, targetWants)) {
						targetSavings -= BUFFER;
						targetWants += BUFFER;
					}

				}
			}

			else { // target more than 0
				if (canIncrease(MAXSAVINGS, targetSavings)) {
					if (!hasExceededTarget(diffFromNT)
							&& canReduce(MINNEEDS, targetNeeds)) {
						targetSavings += BUFFER;
						targetNeeds -= BUFFER;
					} else if (!hasExceededTarget(diffFromWT)
							&& canReduce(MINWANTS, targetWants)) {
						targetSavings += BUFFER;
						targetWants -= BUFFER;
					}
				}
			}

			break;
		case 2:// 010
			if (!hasExceededTarget(diffFromWT)) {
				if (canReduce(MINWANTS, targetWants)) {
					if (hasExceededTarget(diffFromNT)
							&& canIncrease(MAXNEEDS, targetNeeds)) {
						targetWants -= BUFFER;
						targetNeeds += BUFFER;
					}

					else if (hasExceededTarget(diffFromST)
							&& canIncrease(MAXSAVINGS, targetSavings)) {
						targetWants -= BUFFER;
						targetSavings += BUFFER;
					}
				}
			}

			else {
				if (canIncrease(MAXWANTS, targetWants)) {
					if (!hasExceededTarget(diffFromNT)
							&& canReduce(MINNEEDS, targetNeeds)) {
						targetWants += BUFFER;
						targetNeeds -= BUFFER;
					} else if (!hasExceededTarget(diffFromST)
							&& canReduce(MINSAVINGS, targetSavings)) {
						targetWants += BUFFER;
						targetSavings -= BUFFER;
					}
				}
			}

			break;

		case 3:// 011
			if (!hasExceededTarget(diffFromWT) 
					&& hasExceededTarget(diffFromST)) {
				if (canIncrease(MAXSAVINGS, targetSavings)
						&& canReduce(MINWANTS, targetWants)) {
					targetSavings += BUFFER;
					targetWants -= BUFFER;
				}
			}

			else if (hasExceededTarget(diffFromWT)
					&& !hasExceededTarget(diffFromST)) {
				if (canReduce(MINSAVINGS, targetSavings)
						&& canIncrease(MAXWANTS, targetWants)) {
					targetSavings -= BUFFER;
					targetWants += BUFFER;
				}
			}
			break;

		case 4:// 100
			if (!hasExceededTarget(diffFromNT)) {
				if (canReduce(MINNEEDS, targetNeeds)) {
					if (hasExceededTarget(diffFromST)
							&& canIncrease(MAXSAVINGS, targetSavings)) {
						targetSavings += BUFFER;
						targetNeeds -= BUFFER;
					}

					else if (hasExceededTarget(diffFromWT)
							&& canIncrease(MAXWANTS, targetWants)) {
						targetWants += BUFFER;
						targetNeeds -= BUFFER;
					}
				}
			} else {
				if (canIncrease(MAXNEEDS, targetNeeds)) {
					if (!hasExceededTarget(diffFromST)
							&& canReduce(MINSAVINGS, targetSavings)) {
						targetSavings -= BUFFER;
						targetNeeds += BUFFER;
					} else if (!hasExceededTarget(diffFromWT)
							&& canReduce(MINWANTS, targetWants)) {
						targetWants -= BUFFER;
						targetNeeds += BUFFER;
					}
				}
			}
			break;

		case 5:// 101
			if (!hasExceededTarget(diffFromNT) && hasExceededTarget(diffFromST)) {
				if (canReduce(MINNEEDS, targetNeeds)
						&& canIncrease(MAXSAVINGS, targetSavings)) {
					targetNeeds -= BUFFER;
					targetSavings += BUFFER;
				}
			} else if (hasExceededTarget(diffFromNT)
					&& !hasExceededTarget(diffFromST)) {
				if (canIncrease(MAXNEEDS, targetNeeds)
						&& canReduce(MINSAVINGS, targetSavings)) {
					targetNeeds += BUFFER;
					targetSavings -= BUFFER;
				}
			}
			break;

		case 6:// 110
			if (!hasExceededTarget(diffFromNT) && hasExceededTarget(diffFromWT)) {
				if (canReduce(MINNEEDS, targetNeeds)
						&& canIncrease(MAXWANTS, targetWants)) {
					targetNeeds -= BUFFER;
					targetWants += BUFFER;
				}
			} else if (hasExceededTarget(diffFromNT) && !hasExceededTarget(diffFromWT)) {
				if (canIncrease(MAXNEEDS, targetNeeds)
						&& canReduce(MINWANTS, targetWants)) {
					targetNeeds += BUFFER;
					targetWants -= BUFFER;
				}
			}
			break;

		case 7: // 111
			ExpenseType min = ExpenseType.NEED;
			double minAmt = Math.abs(diffFromNT);

			if(Math.abs(diffFromST)<minAmt){
				min = ExpenseType.SAVE;
				minAmt = Math.abs(diffFromST);
			}

			if(Math.abs(diffFromWT)<minAmt){
				min = ExpenseType.WANT;
				minAmt = Math.abs(diffFromWT);
			}

			if(min == ExpenseType.NEED){	
				modifyWants();
				modifySavings();
				allocateRemainingToNeeds();
			}
			else if(min == ExpenseType.WANT){
				modifyNeeds();
				modifySavings();
				allocateRemainingToWants();
			}
			else{
				modifyNeeds();
				modifyWants();
				allocateRemainingToSavings();
			}
			break;

		default:
			break;
		}

		thisMonthNWS.setAll(new GregorianCalendar(), targetNeeds, targetWants,
				targetSavings, data.getMonthlyExpense(ExpenseType.NEED),
				data.getMonthlyExpense(ExpenseType.WANT), getMonthlySavings(),
				data.getMonthlyIncome());
		markUpdate();

	}

	/******Helper Methods******/

	/**
	 * Returns the actual amount of money not spent this month i.e. this month's savings
	 * 
	 * @return
	 */
	private double getMonthlySavings() {
		double savings = data.getMonthlyIncome()
				- data.getMonthlyExpense(ExpenseType.NEED)
				- data.getMonthlyExpense(ExpenseType.WANT);
		if (savings > 0) // makes sure there is no negative savings
			return savings;
		else
			return 0;
	}

	/**
	 * Returns the actual amount of money not spent in the previous month i.e. previous month's savings
	 * @return
	 */
	private double getPrevMonthlySavings() {
		double savings = data.getPrevMonthlyIncome()
				- data.getPrevMonthlyExpense(ExpenseType.NEED)
				- data.getPrevMonthlyExpense(ExpenseType.WANT);
		if (savings > 0) // makes sure there is no negative savings
			return savings;
		else
			return 0;
	}


	/**
	 * Set NWS values to default and start from clean slate.
	 */
	private void initNWSdata(){
		thisMonthNWS.setAll(new GregorianCalendar(), NEEDS, WANTS, SAVINGS,
				data.getMonthlyExpense(ExpenseType.NEED),
				data.getMonthlyExpense(ExpenseType.WANT),
				getMonthlySavings(), data.getMonthlyIncome());
		pastMonthNWS = new NWSdata();
	}

	/**
	 * This returns true if the needs, wants or savings target can be increased
	 * by 5% without exceeding MAX
	 * 
	 * @param MAX
	 * @param oldTarget
	 * @return
	 */
	private boolean canIncrease(double MAX, double oldTarget) {
		if ((oldTarget + 0.05) <= MAX) {
			return true;
		}
		return false;
	}

	/**
	 * This returns true if the needs, wants or savings target can be reduced by
	 * 5% without going below MIN
	 * 
	 * @param MIN
	 * @param oldTarget
	 * @return
	 */
	private boolean canReduce(double MIN, double oldTarget) {
		if ((oldTarget - 0.05) >= MIN) {
			return true;
		}
		return false;
	}

	/**
	 * This returns true if it is a new month.
	 * 
	 * @param date
	 * @return true if date's Month and Year is different from the date in
	 *         thisMonthNWS
	 */
	private boolean isExpired(NWSdata nwsData) {
		Calendar date = nwsData.getDate();
		Calendar today = new GregorianCalendar();
		if (date.get(Calendar.MONTH) == today.get(Calendar.MONTH)) {
			if (date.get(Calendar.YEAR) == today.get(Calendar.YEAR)) {
				return false;
			}
		}
		return true;
	}

	/**
	 * Returns true if today's date is more than two months from last recorded date
	 * @param date
	 * @return
	 */
	private boolean hasSkippedAMonth(Calendar date){
		Calendar today = new GregorianCalendar();	
		if(today.get(Calendar.YEAR)==date.get(Calendar.YEAR)){ //is same year
			if(today.get(Calendar.MONTH)-date.get(Calendar.MONTH)==1){//has a difference of 1 month
				return false;
			}
		}
		else if(today.get(Calendar.YEAR)-date.get(Calendar.YEAR)==1){//one year difference
			if(today.get(Calendar.MONTH)==Calendar.JANUARY && date.get(Calendar.MONTH)==Calendar.DECEMBER){//december to january
				return false;
			}
		}
		return true;
	}

	/**
	 * Returns true if diff is less than 0
	 * @param diff
	 * @return
	 */
	private boolean hasExceededTarget(double diff) {
		if (diff < 0)
			return true;
		else
			return false;
	}

	/**
	 * Sets pastMonthNWS using thisMonthNWS's data
	 * @param thisMonthNWS
	 */
	private void setToPastMonth(NWSdata thisMonthNWS){
		pastMonthNWS.setAll(
				thisMonthNWS.getDate(),
				thisMonthNWS.getTargetNeedsRatio(),
				thisMonthNWS.getTargetWantsRatio(),
				thisMonthNWS.getTargetSavingsRatio(),
				thisMonthNWS.getCurrentNeeds(),
				thisMonthNWS.getCurrentWants(),
				thisMonthNWS.getCurrentSavings(),
				thisMonthNWS.getIncome());
	}

	/**
	 * Modifies savings target until the difference from savings target is more or equal to two times the buffer amount
	 * @return
	 */
	private void modifySavings(){
		while (Math.abs(diffFromST) >= 2 * BUFFER) {
			if (hasExceededTarget(diffFromST)) {
				if (canIncrease(MAXSAVINGS, targetSavings)) {
					targetSavings += BUFFER;
					diffFromST = targetSavings - prevMonthSavings;
				} else {
					break;
				}
			} else { // miss target
				if (canReduce(MINSAVINGS, targetSavings)) {
					targetSavings -= BUFFER;
					diffFromNT = targetSavings - prevMonthSavings;
				} else {
					break;
				}
			}
		}

	}

	/**
	 * Modifies needs target until the difference from needs target is more or equal to two times the buffer amount
	 * @return
	 */
	private void modifyNeeds(){
		while (Math.abs(diffFromNT) >= 2 * BUFFER) {
			if (hasExceededTarget(diffFromNT)) {
				if (canIncrease(MAXNEEDS, targetNeeds)) {
					targetNeeds += BUFFER;
					diffFromNT = targetNeeds - prevMonthNeedsExp;
				} 
				else {
					break;
				}
			} else { // miss target
				if (canReduce(MINNEEDS, targetNeeds)) {
					targetNeeds -= BUFFER;
					diffFromNT = targetNeeds - prevMonthNeedsExp;
				} else {
					break;
				}
			}
		}
	}

	/**
	 * Modifies wants target until the difference from wants target is more or equal to two times the buffer amount
	 */
	private void modifyWants(){
		while (Math.abs(diffFromWT) >= 2 * BUFFER) {
			if (hasExceededTarget(diffFromWT)) {
				if (canIncrease(MAXWANTS, targetWants)) {
					targetWants += BUFFER;
					diffFromWT = targetWants - prevMonthWantsExp;
				} 
				else {
					break;
				}
			} else { // miss target
				if (canReduce(MINWANTS, targetWants)) {
					targetWants -= BUFFER;
					diffFromWT = targetWants - prevMonthWantsExp;
				} else {
					break;
				}
			}
		}
	}

	/**
	 * Sets wants target using remaining percentages
	 */
	private void allocateRemainingToWants(){
		targetWants = 1 - targetNeeds - targetSavings;
		while(targetWants>MAXWANTS || targetWants<MINWANTS){
			if (targetWants > MAXWANTS) {
				targetWants -= BUFFER;
				if (targetNeeds + BUFFER <= MAXNEEDS) {
					targetNeeds += BUFFER;
				} else if (targetSavings + BUFFER <= MAXSAVINGS) {
					targetSavings += BUFFER;
				}
			} else if (targetWants < MINWANTS) {
				targetWants += BUFFER;
				if (targetNeeds - BUFFER >= MINNEEDS) {
					targetNeeds -= BUFFER;
				} else if (targetSavings - BUFFER >= MINSAVINGS) {
					targetSavings -= BUFFER;
				}
			}
			else break;
		}
	}

	/**
	 * Sets savings target using remaining percentages
	 */
	private void allocateRemainingToSavings(){
		targetSavings = 1 - targetNeeds - targetWants;
		while(targetSavings>MAXSAVINGS || targetSavings<MINSAVINGS){
			if (targetSavings > MAXSAVINGS) {
				targetSavings -= BUFFER;
				if (targetNeeds + BUFFER <= MAXNEEDS) {
					targetNeeds += BUFFER;
				} else if (targetWants + BUFFER <= MAXWANTS) {
					targetWants += BUFFER;
				}
			} else if (targetSavings < MINSAVINGS) {
				targetSavings += BUFFER;
				if (targetNeeds - BUFFER >= MINNEEDS) {
					targetNeeds -= BUFFER;
				} else if (targetWants - BUFFER >= MINWANTS) {
					targetWants -= BUFFER;
				}
			}
			else break;
		}
	}

	/**
	 * Sets needs target using remaining percentages
	 */
	private void allocateRemainingToNeeds(){
		targetNeeds = 1 - targetSavings - targetWants;
		while(targetNeeds>MAXNEEDS||targetNeeds<MINNEEDS){
			if(targetNeeds>MAXNEEDS){
				targetNeeds-= BUFFER;
				if(targetSavings+BUFFER<=MAXSAVINGS){
					targetSavings+=BUFFER;
				}
				else if(targetWants+BUFFER<=MAXWANTS){
					targetWants+=BUFFER;
				}
			}
			else if(targetNeeds<MINNEEDS){
				targetNeeds += BUFFER;
				if(targetSavings-BUFFER>=MINSAVINGS){
					targetSavings-=BUFFER;
				}
				else if(targetWants-BUFFER>=MINWANTS){
					targetWants-=BUFFER;
				}
			}
			else break;
		}
	}

	/**
	 * Returns true if past month's records has been modified
	 * @return
	 */
	private boolean hasModifiedPastMonthRecords(){
		if(pastMonthNWS.getIncome() != data.getPrevMonthlyIncome()){
			return true;
		}
		if(pastMonthNWS.getCurrentNeeds() != data.getPrevMonthlyExpense(ExpenseType.NEED)){	
			return true;
		}
		else if(pastMonthNWS.getCurrentWants() != data.getPrevMonthlyExpense(ExpenseType.WANT)){
			return true;
		}
		else{
			return false;
		}
	}

	/**
	 * Updates the values of date, currentNeeds, currentWants and currentSavings of thisMonthNWS. Other values are unchanged
	 */

	private void updateThisMonthProgress(){
		thisMonthNWS.setAll(new GregorianCalendar(), 
				thisMonthNWS.getTargetNeedsRatio(), 
				thisMonthNWS.getTargetWantsRatio(), 
				thisMonthNWS.getTargetSavingsRatio(),
				data.getMonthlyExpense(ExpenseType.NEED),
				data.getMonthlyExpense(ExpenseType.WANT),
				getMonthlySavings(), data.getMonthlyIncome());
	}


	/**
	 * Updates the values of currentNeeds, currentWants and currentSavings of pastMonthNWS. Other values are unchanged
	 */

	private void updatePastMonthProgress(){
		pastMonthNWS.setAll(pastMonthNWS.getDate(), 
				pastMonthNWS.getTargetNeedsRatio(), 
				pastMonthNWS.getTargetWantsRatio(), 
				pastMonthNWS.getTargetWantsRatio(), 
				data.getPrevMonthlyExpense(ExpenseType.NEED), 
				data.getPrevMonthlyExpense(ExpenseType.WANT), 
				getPrevMonthlySavings(), 
				data.getPrevMonthlyIncome());
	}

}


	// End of segment: ezxpns\data\NWSGenerator.java





	/**
	 * origin: ezxpns\data\Target.java
	 */

 */

public class Target{
	
	private Category cat;
	private double targetAmt;

/**
 * Constructs a Target
 * @param cat
 * @param targetAmt
 */
	public Target(Category cat, double targetAmt){
		this.cat = cat;
		this.targetAmt = targetAmt;		
	}
	
/**
 * This returns a copy of the Target
 * @return a copy of the Target
 */
	public Target copy(){
		return new Target(cat, targetAmt);
	} 
	
	/**
	 * This returns the category of the target
	 * @return Category
	 */
	public Category getCategory(){
		return cat;
	}
	
	/**
	 * This returns a the target amount that is set by the user
	 * @return a double 
	 */
	public double getTargetAmt(){
		return targetAmt;
	}
		
}

	// End of segment: ezxpns\data\Target.java





	/**
	 * origin: ezxpns\data\TargetManager.java
	 */

 */
public class TargetManager extends Storable {
	public static interface DataProvider{
		double getMonthlyExpense(Category cat);
		Category getCategory(long id);
	}
	private transient DataProvider data;
	private transient Vector<Bar> bars = new Vector<Bar>();
	private TreeMap<Long,Target> mapTarget = new TreeMap<Long, Target>();	// maps category to target // maybe not necessary if max number of targets is small
	private transient boolean dataUpdated = true;
	
	/**
	 * @param data
	 */
	public TargetManager(DataProvider data){
		this.data = data;
		dataUpdated = true;
	}
	
	@Override
	public void afterDeserialize(){
		for(long id : mapTarget.keySet()){
			mapTarget.put(id, new Target(data.getCategory(id), mapTarget.get(id).getTargetAmt()));
		}
	}
	
	/**
	 * 
	 * @param data
	 */
	public void setDataProvider(DataProvider data){
		this.data = data;
		dataUpdated = true;
	}
	
	/**
	 * This removes the target that has the category ID from the TreeMap
	 * This is called when a Category is deleted
	 * @param identifier
	 */
	public void removeCategoryTarget(long identifier){
		mapTarget.remove(identifier);
		markUpdate();
		markDataUpdated();
	}

	/*Preconditions: cannot add more than one target for the same category.
	 * 				 can only set targets for the SAME month
	 */
	
	/**
	 * This returns the target with the same Category and double attribute
	 * @param cat
	 * @param targetAmt
	 * @return a Target that is newly created
	 */
	public Target setTarget(Category cat, double targetAmt){
		Target target = new Target(cat, targetAmt);
		addTarget(target);
		dataUpdated = true;
		return target;
	}
		
		
	/*UPDATE METHODS
	 * after making the necessary changes
	 * call getOrdered() and getAlert() to receive latest data
	 */
	
	
	/**
	 * adds a new target into the TreeMap
	 * @param target
	 */
	private void addTarget(Target target){
		mapTarget.put(target.getCategory().getID(),target);
		markUpdate();
	}
	/**
	 * Removes target from the tree map
	 * @param target
	 */
	public void removeTarget(Target target){
		mapTarget.remove(target.getCategory().getID());
		dataUpdated = true;
		markUpdate();
	}

	
	/** 
	 * This returns 	a copy of the internal targets
	 * @return a copy of the internal targets
	 */
	public Vector<Target> getTargets(){
		Vector<Target> copy = new Vector<Target>();
		for(Target t : this.mapTarget.values()){
			copy.add(t.copy());
		}
		return copy;
	}
	/**
	 * 
	 * @param cat
	 * @return target object that correspond to Category
	 */
	public Target getTarget(Category cat){
		return mapTarget.get(cat.getID());
	}
	

	/**
	 * 
	 * @return a vector of bar that is classified as alerts
	 */
	public Vector<Bar> getAlerts(){
		Vector<Bar> ordered = getOrderedBar();
		Vector<Bar> alerts = new Vector<Bar>();
		Bar bar;
		for(int i = ordered.size()-1; i>=0; i--){
			bar = ordered.get(i);
			if (isAnAlert(bar))
				alerts.add(bar);
			else break;
		}
		return alerts;
	}


	/**
	 * This generates an ordered vector of bars in increasing order of ratio of currentAmt/targetAmt
	 * @return a vector of bar
	 */
	public Vector<Bar> getOrderedBar(){
		if(dataUpdated){
			genBars();
			dataUpdated = false;
		}
		return bars;
	}
	
	/**
	 * Updates the bars
	 */
	private void genBars(){
		if(bars == null){
			bars = new Vector<Bar>();
		}else{
			bars.clear();
		}
		for(Target target: mapTarget.values()){
			Bar bar = new Bar(target, data.getMonthlyExpense(target.getCategory()));
			bars.add(bar);
		}
		Collections.sort(bars);
	}

	/**
	 * This method checks if a bar qualifies as an alert
	 * @param bar
	 * @return true is the Bar qualifies as an Alert
	 */
	private boolean isAnAlert(Bar bar){
		if(bar.getBarColor()== BarColor.HIGH || bar.getBarColor()== BarColor.MEDIUM) 
			return true;
		else 
			return false;
	}
	

	public void markDataUpdated(){
		dataUpdated = true;
	}
		
}
	
	
	
	

	// End of segment: ezxpns\data\TargetManager.java





	/**
	 * origin: ezxpns\GUI\TargetOverviewPanel.java
	 */

 */
@SuppressWarnings("serial")
public class TargetOverviewPanel extends JPanel {

	private TargetManager targetMgr;
	private final DecimalFormat MONEY_FORMAT = new DecimalFormat("$###,###,##0.00");
	private final DecimalFormat TWO_DP = new DecimalFormat("0.00");
	private JPanel largeBorderLayoutPanel;
	private JPanel tagsPane;
	private JScrollPane targetScrollPane;
	private JPanel smallBorderLayoutpanel;
	private JPanel columnPanel;
	private JPanel separatorPanel;
	private JLabel lblDaysTill;
	private JLabel lblMonth;
	String[] monthName = {"January", "February",
            "March", "April", "May", "June", "July",
            "August", "September", "October", "November",
            "December"};
	private JLabel lblCountDown;
	private JSeparator separator;

	/**
	 * 
	 * @param targetMgrRef
	 */
	public TargetOverviewPanel(TargetManager targetMgrRef) {
		this.targetMgr = targetMgrRef;
		setLayout(new BorderLayout(0, 0));

		largeBorderLayoutPanel = new JPanel();
		add(largeBorderLayoutPanel);
		largeBorderLayoutPanel.setLayout(new BorderLayout(0, 0));

		tagsPane = new JPanel();
		tagsPane.setOpaque(false);
		largeBorderLayoutPanel.add(tagsPane, BorderLayout.NORTH);

		targetScrollPane = new JScrollPane();
		targetScrollPane.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED));
		tagsPane.setLayout(new MigLayout("", "[222.00]50[30][100]", "[0][16px]0[][1]0"));


		targetScrollPane
				.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		largeBorderLayoutPanel.add(targetScrollPane, BorderLayout.CENTER);

		smallBorderLayoutpanel = new JPanel();
		smallBorderLayoutpanel.setBackground(new Color(238,238,238));
		smallBorderLayoutpanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 20, 0));
		targetScrollPane.setViewportView(smallBorderLayoutpanel);
		smallBorderLayoutpanel.setLayout(new BorderLayout(0, 0));

		columnPanel = new JPanel();
		columnPanel.setOpaque(false);
		smallBorderLayoutpanel.add(columnPanel, BorderLayout.NORTH);
		columnPanel.setLayout(new GridLayout(0, 1));

		targetScrollPane.setPreferredSize(new Dimension(50, 50));

		updateTargets();
		updateAlerts();

	}// end constructor

	/**
	 * displays a list of targets in targetScrollPane
	 */
	public void updateTargets() {
		columnPanel.removeAll();
		smallBorderLayoutpanel.add(columnPanel, BorderLayout.NORTH);
		columnPanel.setLayout(new GridLayout(0, 1, 0, 1));
		
		if (targetMgr.getOrderedBar().size() == 0)
			columnPanel.add(new JLabel("You don't have a target this month. Why not add one today?"));
		
		for (int i = targetMgr.getOrderedBar().size() - 1; i >= 0; i--) {
			Bar bar = targetMgr.getOrderedBar().get(i);

			JPanel rowPanel = new JPanel();
			rowPanel.setPreferredSize(new Dimension(200, 50)); // width (just
																// make it big
																// enough for
																// scroll to
																// appear),
																// height
			rowPanel.setOpaque(false);
			columnPanel.add(rowPanel);
			rowPanel.setLayout(new FlowLayout(FlowLayout.LEFT));

			// CATEGORY LABEL
			JLabel lblBar = new JLabel(bar.getTarget().getCategory().getName());
			rowPanel.add(lblBar);
			lblBar.setPreferredSize(new Dimension(100, 50));

			// BAR GRAPHICS
			BarGraphic myBarGraphics = new BarGraphic(bar);
			myBarGraphics.setPreferredSize(new Dimension(150,50));
			myBarGraphics.setOpaque(false);
			rowPanel.add(myBarGraphics);
			
			// SUB LAYOUT FOR AMOUNT
			JPanel subPanel = new JPanel();
			subPanel.setLayout(new BoxLayout(subPanel, BoxLayout.Y_AXIS));
			subPanel.setOpaque(false);
			subPanel.setPreferredSize(new Dimension(80, 26));
			rowPanel.add(subPanel);
			
			// CURRENT AMOUNT/TARGET AMOUNT
			JLabel lblCurrentAmt = new JLabel(MONEY_FORMAT.format(bar.getCurrentAmt()) + " spent");
			lblCurrentAmt.setFont(new Font("Lucida Grande", Font.PLAIN, 10));
			lblCurrentAmt.setHorizontalAlignment(SwingConstants.LEFT);
			subPanel.add(lblCurrentAmt);
			JLabel lblRemainingAmt = new JLabel(MONEY_FORMAT.format(bar.getRemainingAmt())+ " left");
			lblRemainingAmt.setFont(new Font("Lucida Grande", Font.PLAIN, 10));
			lblRemainingAmt.setHorizontalAlignment(SwingConstants.LEFT);
			subPanel.add(lblRemainingAmt);
			
			// Budget
			rowPanel.add(new JLabel("<html>Limit: "+TWO_DP.format(bar.getTargetAmt())+"</html>"));
		}

	}

	/**
	 * Display number of Alerts in the tagsPane
	 */
	public void updateAlerts() {
		
		tagsPane.removeAll();
		
		// lblTargets
		JLabel lblTargets = new JLabel("targets");
		lblTargets.setForeground(new Color(255, 153, 0));
		lblTargets.setFont(new Font("Lucida Grande", Font.PLAIN, 20));
        Calendar cal = Calendar.getInstance();
        String target;
        if (targetMgr.getOrderedBar().size() == 1)
        	target = "Budget";
        else 
        	target = "Budgets";
		lblTargets.setText("<html><b><font size=\"26\">"+targetMgr.getOrderedBar().size()+"</font></b>"+" "+target+" in "+monthName[cal.get(Calendar.MONTH)]+"</html>");
		tagsPane.add(lblTargets, "cell 0 0,alignx left,aligny top");
		
		// lblCountdown
		int remainingDay = Calendar.getInstance().getActualMaximum(Calendar.DAY_OF_MONTH) - cal.get(Calendar.DAY_OF_MONTH);
		String day;
		if (remainingDay == 1)
			day = "day";
		else
			day = "days";
		lblCountDown = new JLabel(""+remainingDay+" more "+day+" to "+ monthName[(cal.get(Calendar.MONTH)+1)%12]);
		tagsPane.add(lblCountDown, "cell 0 1");
		
		separator = new JSeparator();
		tagsPane.add(separator, "cell 0 2,span,growx, wrap");
	
		// ALERTS
		int numAlert = targetMgr.getAlerts().size();
		if (numAlert > 0){
			String alert;
			if (numAlert == 1)
				alert = "Alert";
			else
				alert = "Alerts";
			JLabel lblAlert = new JLabel("<html><b><font size=\"26\">"+numAlert+"</font></b>"+" "+alert+"</html>");
			lblAlert.setForeground(Color.RED);
			lblAlert.setFont(new Font("Lucida Grande", Font.BOLD, 20));
			tagsPane.add(lblAlert, "cell 2 0");

		}

	}
	public void update() {
		//TODO: update the stuff and such in this panel
		this.updateAlerts();
		this.updateTargets();
		this.validate();
	}
	
	
	/**
	 * Bar Graphics (JPanel) displayed in TargetOverviewPanel
	 * 
	// End of segment: ezxpns\GUI\TargetOverviewPanel.java





