//@author: a0087091b



	/**
	 * origin: ezxpns\data\records\ExpenseType.java
	 */

 *
 */
public enum ExpenseType {
	NEED("Need") {
		@Override
		public Color getBaseColor() {
			return new Color(195,195,195);
		}

		@Override
		public Color getNormalColor() {
			return new Color(255,122,122);
		}

		@Override
		public Color getExceedColor() {
			return new Color(245,0,0);
		}
	}, 
	WANT("Want") {
		@Override
		public Color getBaseColor() {
			// TODO Auto-generated method stub
			return new Color(195,195,195);
		}

		@Override
		public Color getNormalColor() {
			// TODO Auto-generated method stub
			return new Color(50,205,50);
		}

		@Override
		public Color getExceedColor() {
			// TODO Auto-generated method stub
			return new Color(0,100,0);
		}
	},
	SAVE("Save"){

		@Override
		public Color getBaseColor() {
			// TODO Auto-generated method stub
			return new Color(195,195,195);
		}

		@Override
		public Color getNormalColor() {
			// TODO Auto-generated method stub
			return new Color(0,191,255);
		}

		@Override
		public Color getExceedColor() {
			// TODO Auto-generated method stub
			return new Color(0,0,205);
		}
		
	};
	
	public final String name;
	
	ExpenseType(String name) {
		this.name = name;
	}
	
	/**
	 * Get base color for NWS chart
	 * @return
	// End of segment: ezxpns\data\records\ExpenseType.java





	/**
	 * origin: ezxpns\data\records\ExpenseType.java
	 */

	 */
	public abstract Color getBaseColor();
	
	/**
	 * Get normal color for NWS chart
	 * @return
	// End of segment: ezxpns\data\records\ExpenseType.java





	/**
	 * origin: ezxpns\data\records\ExpenseType.java
	 */

	 */
	public abstract Color getNormalColor();
	
	/**
	 * Get exceed color for NWS chart
	 * @return
	// End of segment: ezxpns\data\records\ExpenseType.java





	/**
	 * origin: ezxpns\data\records\ExpenseType.java
	 */

	 */
	public abstract Color getExceedColor();
}

	// End of segment: ezxpns\data\records\ExpenseType.java





	/**
	 * origin: ezxpns\data\Report.java
	 */

 */

public class Report {

	// Heading
	private int numRecords = 0;
	private Date start;
	private Date end;
	private double totalIncome = 0;
	private double totalExpense = 0;
	private double balance = 0;
	private double incomePercentage = 0;
	private double expensePercentage = 0;

	// 1. Expense
	private Vector<ReportCategory> ExpenseCategory;
	private double aveExpense; // Average Expense per day

	/**
	 * Constructor, set date range
	 * 
	 * @param start
	 * @param end
	 */
	public Report(Date start, Date end) {
		this.start = start;
		this.end = end;
	}

	/**
	 * Set 'Heading' of the report, namely: total income, total expense, and
	 * balance.
	 * 
	 * @param income
	 * @param expense
	 * @param balance
	 * @param numRecords 
	 */
	public void setHeading(double income, double expense, double balance, int numRecords) {
		totalIncome = income;
		totalExpense = expense;
		this.balance = balance;
		this.numRecords = numRecords;
		double total = income + expense;
		if (total == 0){
			incomePercentage = 0;
			expensePercentage = 0;
		}
		else{
		incomePercentage = income/total*100;
		expensePercentage = expense/total*100;
		}
	}

	/**
	 * Set 'Expense' of the report, namely: Expense table, and average expense
	 * per day
	 * 
	 * @param expenseCategory
	 */
	public void setSectionExpense(Vector<ReportCategory> expenseCategory) {
		ExpenseCategory = expenseCategory;
		int numDays = (int) (end.getTime() - start.getTime()
				/ (1000 * 60 * 60 * 24));
		aveExpense = totalExpense / numDays;
	}

	/**
	 * Get start date
	 * 
	 * @return
	 */
	public Date getStart() {
		return start;
	}

	/**
	 * Get end date
	 * 
	 * @return
	 */
	public Date getEnd() {
		return end;
	}

	/**
	 * Get total income for the period between start date and end date
	 * 
	 * @return
	 */
	public double getTotalIncome() {
		return totalIncome;
	}

	/**
	 * Get total expense for the period between start date and end date
	 * 
	 * @return
	 */
	public double getTotalExpense() {
		return totalExpense;
	}

	/**
	 * Get balance for the period between start date and end date
	 * 
	 * @return
	 */
	public double getBalance() {
		return balance;
	}

	/**
	 * Get a vector of ReportCategory
	 * 
	 * @return
	 */
	public Vector<ReportCategory> getExpenseCategory() {
		return ExpenseCategory;
	}

	/**
	 * Get the average expense for the period between start date and end date
	 * 
	 * @return
	 */
	public double getAveExpense() {
		return aveExpense;
	}
	
	/**
	 * Get the percentage of income
	 * @return
	 */
	public double getIncomePercentage(){
		return incomePercentage;
	}
	
	/**
	 * Get the percentage of expense
	 * @return
	 */
	public double getExpensePercentage(){
		return expensePercentage;
	}
	
	/**
	 * Get the number of records found
	 * @return
	 */
	public int getNumRecords(){
		return numRecords;
	}
}


	// End of segment: ezxpns\data\Report.java





	/**
	 * origin: ezxpns\data\ReportCategory.java
	 */

 */

public class ReportCategory implements Comparable<ReportCategory> {

	private String category;
	private int frequency = 0;
	private double amount = 0;
	private double percentage = 0;
	private double amtPerFreq = 0; // Amount/Frequency

	/**
	 * Constructor, initialise category name
	 * 
	 * @param name
	 */
	public ReportCategory(String name) {
		category = name;
	}

	/**
	 * Increment frequency by 1
	 */
	public void incrementFreq() {
		frequency++;
	}

	/**
	 * Increment amount
	 * 
	 * @param amount
	 */
	public void incrementAmount(double amount) {
		this.amount += amount;
	}

	/**
	 * Set percentage for expense of this category
	 * 
	 * @param percentage
	 */
	public void setPercentage(double percentage) {
		this.percentage = percentage;
	}

	/**
	 * Calculate the amount per frequency ratio
	 */
	public void calAmtPerFreq() {
		amtPerFreq = amount / frequency;
	}

	/**
	 * Get the name of this category
	 * @return
	 */
	public String getCategory() {
		return category;
	}

	/** 
	 * Get the requency of this category
	 * @return
	 */
	public int getFrequency() {
		return frequency;
	}

	/**
	 * Get the total expense for this category
	 * @return
	 */
	public double getAmount() {
		return amount;
	}

	/**
	 * Get the percentage of expense of this category
	 * @return
	 */
	public double getPercentage() {
		return percentage;
	}

	/**
	 * Get the amount per frequency ratio for this category
	 * @return
	 */
	public double getAmtPerFreq() {
		return amtPerFreq;
	}

	/**
	 * Comparable, for sorting Vector in descending order according to percentage
	 */
	@Override
	public int compareTo(ReportCategory anotherCategory) {
		if (this.percentage < anotherCategory.getPercentage())
			return 1;
		else if (this.percentage > anotherCategory.getPercentage())
			return -1;
		else
			return 0;
	}
}

	// End of segment: ezxpns\data\ReportCategory.java





	/**
	 * origin: ezxpns\data\ReportGenerator.java
	 */

 * 
 */

public class ReportGenerator {
	public static interface DataProvider {
		/**
		 * Returns a Pair of ExpenseRecord and IncomeRecord vectors within
		 * the start date and end date
		 * @param start
		 * @param end
		 * @return
		 */
		Pair<Vector<ExpenseRecord>, Vector<IncomeRecord>> getDataInDateRange(
				Date start, Date end);
	}

	private DataProvider data;
	private Pair<Vector<ExpenseRecord>, Vector<IncomeRecord>> records;
	private Vector<ExpenseRecord> expenseRecord;
	private Vector<IncomeRecord> incomeRecord;
	private Report myReport;
	private Vector<ReportCategory> expenseCategory;
	private static int INVALID = -1;

	/**
	 * Hook up the data provider
	 * 
	 * @param data
	 */
	public ReportGenerator(DataProvider data) {
		this.data = data;
	}

	/**
	 * Get the required records within date range Returns Report object.
	 * 
	 * @param start
	 * @param end
	 * @throws Exception
	 */
	public Report generateReport(Date start, Date end) throws Exception {
		// Exception when start or end are empty
		if (start == null || end == null)
			throw(new NullPointerException());
		// Exception to handle cases where end > start
		if (dateError(start, end))
			throw (new DateOrderException());
		
		Pair<Date, Date> normalizedRange = SearchRequest.normalizeDateRange(new Pair<Date, Date>(start, end));
		start = normalizedRange.getLeft();
		end = normalizedRange.getRight();

		expenseCategory = new Vector<ReportCategory>();
		records = getRecords(start, end);
		seperatePair(records);
		return writeReport(start, end);
	}

	private Pair<Vector<ExpenseRecord>, Vector<IncomeRecord>> getRecords(
			Date start, Date end) {
		return data.getDataInDateRange(start, end);
	}

	/**
	 * Separate Pair object into Vector<ExpenseRecord> and Vector<IncomeRecord>
	 * @param pair
	 */
	private void seperatePair(
			Pair<Vector<ExpenseRecord>, Vector<IncomeRecord>> pair) {
		expenseRecord = pair.getLeft();
		incomeRecord = pair.getRight();
		System.out.println(expenseRecord.size()+" "+incomeRecord.size());
	}

	/**
	 * Create a new Report object and fill it with new information
	 * @param start
	 * @param end
	 * @return
	 */
	private Report writeReport(Date start, Date end) {
		myReport = new Report(start, end);
		processHeading(); // process heading
		processSectionExpense(); // process Section 1. Expense
		return myReport;
	}

	/**
	 * Calculate totalIncome, totalExpense, balance and deliver information to
	 * Report Object
	 */
	private void processHeading() {
		double totalIncome = calTotalIncome();
		double totalExpense = calTotalExpense();
		double balance = totalIncome - totalExpense;
		int numRecords = expenseRecord.size() + incomeRecord.size();
		myReport.setHeading(totalIncome, totalExpense, balance, numRecords);
	}

	/** 
	 * Calculate sum of income from list of IncomeRecord
	 * @return
	 */
	private double calTotalIncome() {
		return Record.sumAmount(incomeRecord);
	}

	/**
	 * Calculate sum of expense from list of ExpenseRecord
	 * @return
	 */
	private double calTotalExpense() {
		return Record.sumAmount(expenseRecord);
	}

	/**
	 * Arrange expense into categories and store them in ReportCategory object.
	 * Also calculates Amount per Frequency. Send Vector of ReportCategory to
	 * Report Object.
	 */
	private void processSectionExpense() {
		populateExpenseCategory();
		calAmountPerFreq();
		
		// Sort expenseCategory in decending order (percentage)
		Collections.sort(expenseCategory);
		myReport.setSectionExpense(expenseCategory);
	}

	/**
	 * Populate a vector of ReportCategory
	 */
	private void populateExpenseCategory() {
		ReportCategory newCategory;
		// Store Expenses into Category
		for (int i = 0; i < expenseRecord.size(); i++) {
			// check category
			String categoryName = expenseRecord.get(i).getCategory().getName();
			int id = getCategoryIndex(categoryName);
			if (id == INVALID) {
				newCategory = new ReportCategory(categoryName);
				expenseCategory.add(newCategory);
			} else
				newCategory = expenseCategory.get(id);
			newCategory.incrementFreq();
			newCategory.incrementAmount(expenseRecord.get(i).getAmount());
		} // for
	}

	/**
	 * Calculate amount per frequency ratio for an expense category
	 */
	private void calAmountPerFreq() {
		// Calculates Amount per Frequency
		double totalExpense = myReport.getTotalExpense();
		for (int i = 0; i < expenseCategory.size(); i++) {
			expenseCategory.get(i).setPercentage(
					expenseCategory.get(i).getAmount() / totalExpense * 100);
			expenseCategory.get(i).calAmtPerFreq();
		}
	}

	/**
	 * Check if expenseRecord contains a specific category, and return
	 * expenseRecord's array index
	 * 
	 * @param categoryName
	 * @return array index of expenseRecord if exist, else return -1
	 */
	private int getCategoryIndex(String categoryName) {
		if (expenseCategory.size() == 0)
			return INVALID;
		for (int i = 0; i < expenseCategory.size(); i++) {
			if (expenseCategory.get(i).getCategory()
					.equals(categoryName))
				return i;
		}
		return INVALID;
	}

	/**
	 * Check if start date and end date are valid (start date <= end date)
	 * 
	 * @param start
	 * @param end
	 * @return true if error, false if OK
	 */
	private boolean dateError(Date start, Date end) {
		if (start.getTime() > end.getTime())
			return true;
		return false;
	}
	
	/**
	 * Exception Class when "start date" > "end date"
	// End of segment: ezxpns\data\ReportGenerator.java





	/**
	 * origin: ezxpns\data\ReportGenerator.java
	 */

	 *
	 */
	public class DateOrderException extends Exception{
		public DateOrderException() { super(); }
	}

}

	// End of segment: ezxpns\data\ReportGenerator.java





	/**
	 * origin: ezxpns\data\SummaryDetails.java
	 */

 *
 */

public class SummaryDetails {
	
	private SummaryType summaryType;
	private double income = 0;
	private double expense = 0;
	private double balance = 0;
	private final static double EPSILON = 0.00001; // correction for zero (double)

	
	public SummaryDetails(double income, double expense, SummaryType myType){
		this.income = income;
		this.expense = expense;
		balance = income - expense;
		summaryType = myType;
	}
	
	/**
	 * Get income value for this SummaryDetails
	 * @return
	 */
	public double getIncome(){
		if (Math.abs(balance) < EPSILON)
			return 0;
		return income;
	}
	
	/**
	 * Get expense value for this SummaryDetails
	 * @return
	 */
	public double getExpense(){
		if (Math.abs(balance) < EPSILON)
			return 0;
		return expense;
	}
	
	/**
	 * Get balance value for this SummaryDetails
	 * @return
	 */
	public double getBalance(){
		if (Math.abs(balance) < EPSILON)
			return 0;
		return balance;
	}
	
	/**
	 * Get the SummaryType for this SummaryDetails
	 * @return
	 */
	public SummaryType getSummaryType(){
		return summaryType;
	}
}

	// End of segment: ezxpns\data\SummaryDetails.java





	/**
	 * origin: ezxpns\data\SummaryGenerator.java
	 */

 * 
 */

public class SummaryGenerator {

	public static interface DataProvider {
		double getTotalExpense();
		double getTotalIncome();
		double getDailyExpense();
		double getDailyIncome();
		double getMonthlyExpense();
		double getMonthlyIncome();
		double getYearlyExpense();
		double getYearlyIncome();
	}

	private DataProvider data;
	private static SummaryDetails allTime;
	private static SummaryDetails yearly;
	private static SummaryDetails monthly;
	private static SummaryDetails today;
	
	/**
	 * Returns a SummaryDetails object based on which SummaryType
	 * is in the parameter
	 * @param myType
	 * @return
	 */
	public SummaryDetails getSummaryDetails(SummaryType myType){
		return myType.getSummaryDetails();
	}

	/**
	 * Hook up the data provider
	 * 
	 * @param data
	 */
	public SummaryGenerator(DataProvider data) {
		this.data = data;
		this.markDataUpdated();
	}

	/**
	 * Generate 4 SummaryDetails objects for the different time ranges
	 */
	public void markDataUpdated() {
		allTime = new SummaryDetails(data.getTotalIncome(), data.getTotalExpense(), SummaryType.ALLTIME);
		yearly = new SummaryDetails(data.getYearlyIncome(), data.getYearlyExpense(), SummaryType.YEAR);
		monthly = new SummaryDetails(data.getMonthlyIncome(), data.getMonthlyExpense(), SummaryType.MONTH);
		today = new SummaryDetails(data.getDailyIncome(), data.getDailyExpense(), SummaryType.TODAY);
	}
	
	/**
	 * enum class for the 4 different time ranges 
	// End of segment: ezxpns\data\SummaryGenerator.java





	/**
	 * origin: ezxpns\data\SummaryGenerator.java
	 */

	 *
	 */
	public enum SummaryType{
		TODAY{
			public SummaryDetails getSummaryDetails(){
				return today;}

			public String getName() {
				return "Today";
			}
		},
		MONTH{
			public SummaryDetails getSummaryDetails(){
				return monthly;}

			public String getName() {
				return "This Month";
			}
		},
		YEAR{
			public SummaryDetails getSummaryDetails(){
				return yearly;}

			public String getName() {
				return "This Year";
			}
		},
		ALLTIME{
			public SummaryDetails getSummaryDetails(){
				return allTime;}

			public String getName() {
				return "All Time";
			}
		};
		
		/**
		 * Returns the enum type's SummaryDetails
		 * @return
		 */
		public abstract SummaryDetails getSummaryDetails();
		
		/**
		 * Returns the string to be displayed on Main Window based
		 * on which time range is selected 
		 * @return
		 */
		public abstract String getName();
	}
}

	// End of segment: ezxpns\data\SummaryGenerator.java





	/**
	 * origin: ezxpns\GUI\ReportFrame.java
	 */

 */
@SuppressWarnings("serial")
public class ReportFrame extends JFrame implements ComponentListener {
	private JPanel cards;
	private JPanel generateReport;
	private JPanel curtain;
	private JLabel startDateDisplay;
	private JLabel endDateDisplay;
	private JPanel cardGeneral;
	private JPanel cardExpense;
	private JLayeredPane layeredPane;
	private JPanel report;
	private JPanel expenseTable;
	private JLabel lblIncome;
	private JLabel lblExpense;
	private JLabel lblBalance;
	private JPanel button;
	private JButton btnGeneral;
	private JButton btnExpense;
	private JTable table;
	private InteractiveTableModel tableModel;
	private Report myReportData;
	private JLabel lblErrorMsg;
	private int pieChartIndex = 0;
	private JDateChooser dateChooserStart;
	private JDateChooser dateChooserEnd;
	private ColorSquare myIncome;
	private ColorSquare myExpense;
	private ColorSquare myBalance;
	private JLabel lblNumRecords;
	
	DecimalFormat df = new DecimalFormat("#.##");

	// Date Format
	SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

	public static final int DEFAULT_WIDTH = 1000;
	public static final int DEFAULT_HEIGHT = 600;
	public static final String[] columnNames = { "Category", "Frequency",
			"Amount", "Percentage", "Amount/Frequency" };

	private ReportGenerator rptGen; // Place to store the reference
	private JButton btnGenerateANew;
	private JButton btnThisMonth;

	public ReportFrame(ReportGenerator rptGenRef) { // Passing in the reference
		super("EzXpns - Report");

		rptGen = rptGenRef; // Storing the reference

		this.setBounds(0, 0, DEFAULT_WIDTH, DEFAULT_HEIGHT);
		getContentPane().setLayout(new GridLayout(1, 0, 0, 0));

		dateFormat.setCalendar(new GregorianCalendar());

		// Layaered Pane
		layeredPane = new JLayeredPane();
		getContentPane().add(layeredPane);

		// Generate a Report
		generateReport = new JPanel();
		layeredPane.add(generateReport);
		generateReport.setBackground(Color.CYAN.darker());
		generateReport.setBounds(0, 80, 783, 126); // x, y, width, height

		// White Curtain
		curtain = new JPanel();
		curtain.setBackground(new Color(255, 255, 255, 230));
		curtain.setBounds(0, 0, 783, 424);
		layeredPane.add(curtain);

		// Button Panel
		button = new JPanel();
		button.setBackground(new Color(255, 255, 255));
		button.setBounds(0, 0, WIDTH, 400);
		button.setOpaque(false);
		layeredPane.add(button);

		// General & Expense Buttons

		btnGeneral = new JButton("General");
		btnExpense = new JButton("Expense");

		GroupLayout gl_button = new GroupLayout(button);
		gl_button.setHorizontalGroup(gl_button.createParallelGroup(
				Alignment.TRAILING).addGroup(
				gl_button
						.createSequentialGroup()
						.addContainerGap(300, Short.MAX_VALUE)
						.addComponent(btnGeneral, GroupLayout.PREFERRED_SIZE,
								117, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED)
						.addComponent(btnExpense).addGap(60)));
		gl_button
				.setVerticalGroup(gl_button.createParallelGroup(
						Alignment.LEADING).addGroup(
						gl_button
								.createSequentialGroup()
								.addGap(78)
								.addGroup(
										gl_button
												.createParallelGroup(
														Alignment.BASELINE,
														false)
												.addComponent(btnGeneral)
												.addComponent(btnExpense))
								.addGap(293)));
		button.setLayout(gl_button);

		// Actual Report Panel
		report = new JPanel();
		layeredPane.add(report);
		report.setBackground(Color.WHITE);
		report.setBounds(0, 0, 579, 400);

		// Report Header in Report Panel
		JLabel lblReport = new JLabel("Report");
		lblReport.setFont(new Font("Lucida Grande", Font.PLAIN, 21));

		// cards -> CardLayout
		cards = new JPanel();
		report.add(cards);

		// Setting up the cards
		cards.setLayout(new CardLayout(0, 0));
		cardGeneral = new JPanel(); // General Card
		cardGeneral.setBackground(new Color(255, 255, 255));
		cardGeneral.setForeground(Color.RED);
		cardExpense = new JPanel(); // Expense Card
		cardExpense.setBackground(new Color(255, 255, 255));
		cardExpense.setForeground(Color.MAGENTA);
		cards.add(cardGeneral, "GeneralCard");
		cards.add(cardExpense, "ExpenseCard");
		cardExpense
				.setLayout(new MigLayout("",
						"[262.00,grow,center][260.00,grow,right]",
						"[280.00,grow,fill]"));

		expenseTable = new JPanel();
		expenseTable.setBackground(new Color(255, 255, 255));
		cardExpense.add(expenseTable, "cell 1 0,grow");

		// ActionListener for General Button
		btnGeneral.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				CardLayout cl = (CardLayout) (cards.getLayout());
				cl.show(cards, "GeneralCard");
			}
		});
		// ActionListener for Expense Button
		btnExpense.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				CardLayout cl = (CardLayout) (cards.getLayout());
				cl.show(cards, "ExpenseCard");
			}
		});

		// Report JLabel
		JLabel fromDisplay = new JLabel("from");
		startDateDisplay = new JLabel("test start");
		JLabel toDisplay = new JLabel("to");
		endDateDisplay = new JLabel("test end");

		btnGenerateANew = new JButton("Generate a new Report");
		
		// Disable Buttons 
		btnGeneral.setEnabled(false);
		btnExpense.setEnabled(false);
		btnGenerateANew.setEnabled(false);

		// ActionListener for Generate new Report Button
		btnGenerateANew.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				curtain.setVisible(true);
				generateReport.setVisible(true);
				pieChartIndex = 1;
				btnGeneral.setEnabled(false);
				btnExpense.setEnabled(false);
				btnGenerateANew.setEnabled(false);
				dateChooserStart.setDate(null);
				dateChooserEnd.setDate(null);
			}
		});

		GroupLayout gl_report = new GroupLayout(report);
		gl_report
				.setHorizontalGroup(gl_report
						.createParallelGroup(Alignment.LEADING)
						.addGroup(
								gl_report
										.createSequentialGroup()
										.addGap(20)
										.addGroup(
												gl_report
														.createParallelGroup(
																Alignment.LEADING)
														.addComponent(
																cards,
																GroupLayout.DEFAULT_SIZE,
																249,
																Short.MAX_VALUE)
														.addGroup(
																gl_report
																		.createSequentialGroup()
																		.addComponent(
																				lblReport)
																		.addPreferredGap(
																				ComponentPlacement.UNRELATED)
																		.addComponent(
																				fromDisplay)
																		.addPreferredGap(
																				ComponentPlacement.RELATED)
																		.addComponent(
																				startDateDisplay)
																		.addPreferredGap(
																				ComponentPlacement.RELATED)
																		.addComponent(
																				toDisplay)
																		.addPreferredGap(
																				ComponentPlacement.RELATED)
																		.addComponent(
																				endDateDisplay)
																		.addPreferredGap(
																				ComponentPlacement.RELATED,
																				156,
																				Short.MAX_VALUE)
																		.addComponent(
																				btnGenerateANew)
																		.addGap(10)))
										.addGap(27)));
		gl_report.setVerticalGroup(gl_report.createParallelGroup(
				Alignment.LEADING)
				.addGroup(
						gl_report
								.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										gl_report
												.createParallelGroup(
														Alignment.BASELINE)
												.addComponent(lblReport)
												.addComponent(fromDisplay)
												.addComponent(startDateDisplay)
												.addComponent(toDisplay)
												.addComponent(endDateDisplay)
												.addComponent(btnGenerateANew))
								.addGap(24)
								.addComponent(cards, GroupLayout.DEFAULT_SIZE,
										296, Short.MAX_VALUE).addGap(48)));
		report.setLayout(gl_report);

		// Components in Generate a Report
		JLabel lblGenerateAReport = new JLabel("Generate a Report");
		lblGenerateAReport.setFont(new Font("Lucida Grande", Font.PLAIN, 21));
		lblGenerateAReport.setForeground(Color.WHITE);

		JLabel lblStartDate = new JLabel("Start Date");
		lblStartDate.setForeground(Color.WHITE);

		JLabel lblEndDate = new JLabel("End Date");
		lblEndDate.setForeground(Color.WHITE);

		// New Date Chooser
		dateChooserStart = new JDateChooser();
		dateChooserStart.getJCalendar().setTodayButtonVisible(true);
		dateChooserStart.setDateFormatString("dd/MM/yyyy");
		dateChooserStart.setMaxSelectableDate(new Date());
		PropertyChangeListener calendarChangeListener  = new PropertyChangeListener() {
	        @Override
	        public void propertyChange(PropertyChangeEvent evt) {
	            Date selectedDate = ((JCalendar)evt.getSource()).getDate();
	        }
	    };
	    dateChooserStart.getJCalendar().addPropertyChangeListener("calendar",calendarChangeListener);
		dateChooserEnd = new JDateChooser();
		dateChooserEnd.getJCalendar().setTodayButtonVisible(true);
		dateChooserEnd.setDateFormatString("dd/MM/yyyy");
		dateChooserEnd.setMaxSelectableDate(new Date());
	    dateChooserEnd.getJCalendar().addPropertyChangeListener("calendar",calendarChangeListener);

		
		// "Generate" Button
		JButton btnGenerate = new JButton("Generate");
		btnGenerate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				generateAction();
			}
		});
		
		

		lblErrorMsg = new JLabel("You can manually type date in this format: dd/mm/yyyy");
		lblErrorMsg.setForeground(Color.WHITE);
		
		btnThisMonth = new JButton("This Month");
		btnThisMonth.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				Calendar calendar = Calendar.getInstance();
				calendar.setTime(new Date());
				calendar.set(Calendar.DAY_OF_MONTH, 1);
				calendar.set(Calendar.HOUR, 0);
				calendar.set(Calendar.MINUTE, 0);
				calendar.set(Calendar.SECOND, 0);
				calendar.set(Calendar.AM_PM, Calendar.AM);
				dateChooserStart.setDate(calendar.getTime());
				calendar = Calendar.getInstance();
				calendar.setTime(new Date());
				calendar.set(Calendar.HOUR, 0);
				calendar.set(Calendar.MINUTE, 0);
				calendar.set(Calendar.SECOND, 0);
				calendar.set(Calendar.AM_PM, Calendar.AM);
				dateChooserEnd.setDate(calendar.getTime());
			}
		});
		
		JButton btnLastMonth = new JButton("Last Month");
		btnLastMonth.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				Calendar calendar = Calendar.getInstance();
				calendar.setTime(new Date());
				calendar.set(Calendar.DAY_OF_MONTH, 1);
				calendar.set(Calendar.MONTH, (Calendar.MONTH)%12);
				calendar.set(Calendar.DAY_OF_MONTH, 1);
				calendar.set(Calendar.HOUR, 0);
				calendar.set(Calendar.MINUTE, 0);
				calendar.set(Calendar.SECOND, 0);
				calendar.set(Calendar.AM_PM, Calendar.AM);
				dateChooserStart.setDate(calendar.getTime());
				calendar.set(Calendar.DAY_OF_MONTH, Calendar.getInstance().getActualMaximum(Calendar.DAY_OF_MONTH)+1);
				calendar.set(Calendar.HOUR, 0);
				calendar.set(Calendar.MINUTE, 0);
				calendar.set(Calendar.SECOND, 0);
				calendar.set(Calendar.AM_PM, Calendar.AM);
				dateChooserEnd.setDate(calendar.getTime());
			}
		});
		
		JButton btnThisYear = new JButton("This Year");
		btnThisYear.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				Calendar calendar = Calendar.getInstance();
				calendar.setTime(new Date());
				calendar.set(Calendar.DAY_OF_MONTH, 1);
				calendar.set(Calendar.MONTH, 0);
				calendar.set(Calendar.DAY_OF_MONTH, 1);
				calendar.set(Calendar.HOUR, 0);
				calendar.set(Calendar.MINUTE, 0);
				calendar.set(Calendar.SECOND, 0);
				calendar.set(Calendar.AM_PM, Calendar.AM);
				dateChooserStart.setDate(calendar.getTime());
				calendar = Calendar.getInstance();
				calendar.setTime(new Date());
				calendar.set(Calendar.HOUR, 0);
				calendar.set(Calendar.MINUTE, 0);
				calendar.set(Calendar.SECOND, 0);
				calendar.set(Calendar.AM_PM, Calendar.AM);
				dateChooserEnd.setDate(calendar.getTime());
			}
		});
		
	
		
		
		GroupLayout gl_generateReport = new GroupLayout(generateReport);
		gl_generateReport.setHorizontalGroup(
			gl_generateReport.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_generateReport.createSequentialGroup()
					.addGap(10)
					.addGroup(gl_generateReport.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_generateReport.createSequentialGroup()
							.addGroup(gl_generateReport.createParallelGroup(Alignment.LEADING)
								.addComponent(lblErrorMsg)
								.addComponent(lblGenerateAReport))
							.addPreferredGap(ComponentPlacement.RELATED, 249, Short.MAX_VALUE)
							.addComponent(btnGenerate)
							.addGap(49))
						.addGroup(gl_generateReport.createSequentialGroup()
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(lblStartDate)
							.addPreferredGap(ComponentPlacement.UNRELATED)
							.addComponent(dateChooserStart, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(lblEndDate)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(dateChooserEnd, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(btnLastMonth)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(btnThisMonth)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(btnThisYear)))
					.addGap(23))
		);
		gl_generateReport.setVerticalGroup(
			gl_generateReport.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_generateReport.createSequentialGroup()
					.addContainerGap()
					.addGroup(gl_generateReport.createParallelGroup(Alignment.TRAILING)
						.addGroup(gl_generateReport.createSequentialGroup()
							.addComponent(lblGenerateAReport)
							.addPreferredGap(ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
							.addGroup(gl_generateReport.createParallelGroup(Alignment.LEADING)
								.addComponent(dateChooserStart, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
								.addGroup(gl_generateReport.createSequentialGroup()
									.addGroup(gl_generateReport.createParallelGroup(Alignment.TRAILING)
										.addGroup(gl_generateReport.createSequentialGroup()
											.addComponent(lblStartDate)
											.addPreferredGap(ComponentPlacement.RELATED))
										.addComponent(dateChooserEnd, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
										.addGroup(gl_generateReport.createParallelGroup(Alignment.BASELINE)
											.addComponent(btnLastMonth)
											.addComponent(btnThisMonth)
											.addComponent(btnThisYear)))
									.addGroup(gl_generateReport.createParallelGroup(Alignment.BASELINE)
										.addComponent(btnGenerate)
										.addComponent(lblErrorMsg))))
							.addGap(22))
						.addGroup(gl_generateReport.createSequentialGroup()
							.addGap(12)
							.addComponent(lblEndDate)
							.addGap(57))))
		);
		generateReport.setLayout(gl_generateReport);

		// Add Component Listener to identified component
		cards.addComponentListener(this);
		curtain.addComponentListener(this);
		report.addComponentListener(this);
		cardGeneral.addComponentListener(this);
		cardExpense.addComponentListener(this);

		cardGeneral
				.setLayout(new MigLayout("",
						"[262.00,grow,center][260.00,grow,right]",
						"[280.00,grow, center]"));

		JPanel generalSummary = new JPanel();
		generalSummary.setBackground(new Color(255, 255, 255));
		cardGeneral.add(generalSummary, "cell 1 0,alignx center,aligny center");
		generalSummary.setLayout(new MigLayout("","[500, center]","[][30][30][30]"));
		
		lblNumRecords = new JLabel();
		generalSummary.add(lblNumRecords, "wrap");
		myBalance = new ColorSquare("Balance");
		myBalance.setBackground(new Color(0,191,255));
		generalSummary.add(myBalance, "wrap");
		myIncome = new ColorSquare("Income");
		myIncome.setBackground(new Color(50,205,50));
		generalSummary.add(myIncome, "wrap");
		myExpense = new ColorSquare("Expense");
		myExpense.setBackground(new Color(255,122,122));
		generalSummary.add(myExpense, "wrap");

		this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		setLocationRelativeTo(null);
	}
	
	private void generateAction(){
		try {
			myReportData = rptGen.generateReport(dateChooserStart.getDate(), dateChooserEnd.getDate());
			System.out.println(dateChooserStart.getDate());
			System.out.println(dateChooserEnd.getDate());
			//Check if there is records
			if (myReportData.getNumRecords() == 0){
				JOptionPane.showMessageDialog(this, "No records were found in that time range.", "Alert!", JOptionPane.WARNING_MESSAGE);
				return;
			}
			// Disappear
			initPieChart();
			initTable();
			initSummary();
			generateReport.setVisible(false);
			curtain.setVisible(false);
			
			// enable buttons
			btnGeneral.setEnabled(true);
			btnExpense.setEnabled(true);
			btnGenerateANew.setEnabled(true);
			
			startDateDisplay.setText(dateFormat.format(dateChooserStart.getDate()));
			endDateDisplay.setText(dateFormat.format(dateChooserEnd.getDate()));
		} catch (NullPointerException e1) {
			lblErrorMsg
					.setText("Date Field is blank! Please enter the date in the following format: dd/mm/yyyy");
		} catch (ParseException e1){
			lblErrorMsg
			.setText("Please enter the date in the following format: dd/mm/yyyy");
		} catch (DateOrderException e1) {
			// TODO Auto-generated catch block
			lblErrorMsg
					.setText("Please check the ordering of your start/end date");
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		
	}

	public void showScreen() {
		this.setVisible(true);
	}

	@Override
	public void componentHidden(ComponentEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void componentMoved(ComponentEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void componentResized(ComponentEvent arg0) {
		// TODO Auto-generated method stub
		Insets insets = this.getInsets();
		int w = this.getWidth() - insets.left - insets.right;
		int h = this.getHeight() - insets.top - insets.bottom;
		button.setSize(w, h);
		curtain.setSize(w, h);
		cards.setBounds(cards.getX(), cards.getY(), w, h);
		report.setSize(w, h);
		generateReport.setSize(w, 120);
		layeredPane.revalidate();
		layeredPane.repaint();
	}

	@Override
	public void componentShown(ComponentEvent arg0) {
		// TODO Auto-generated method stub

	}

	/**
	 * Creates a sample dataset
	 */

	/*private PieDataset createDataset() {
		DefaultPieDataset result = new DefaultPieDataset();
		result.setValue("Balance", myReportData.getBalance());
		result.setValue("Expense", myReportData.getTotalExpense());
		result.setValue("Income", myReportData.getTotalIncome());
		return result;
	}*/
	
	private CategoryDataset createDatasetGeneral() {
		DefaultCategoryDataset dataset = new DefaultCategoryDataset();
		dataset.addValue(myReportData.getIncomePercentage(), "Income", "");
		dataset.addValue(myReportData.getExpensePercentage(), "Expense", "");
		
		return dataset;
	}

	private PieDataset createDatasetExpense() {
		DefaultPieDataset result = new DefaultPieDataset();
		Vector<ReportCategory> list = myReportData.getExpenseCategory();
		for (int i = 0; i < list.size(); i++) {
			result.setValue(list.get(i).getCategory(), list.get(i)
					.getPercentage());
		}
		return result;

	}

	/**
	 * Creates a chart
	 */

	private JFreeChart createChart(PieDataset dataset, String title) {

		JFreeChart chart = ChartFactory.createPieChart(title, // chart title
				dataset, // data
				true, // include legend
				true, false);

		PiePlot plot = (PiePlot) chart.getPlot();
		plot.setExplodePercent("Income", 0.2);
		plot.setStartAngle(0);
		plot.setDirection(Rotation.CLOCKWISE);
		plot.setOutlineVisible(false);
		plot.setBackgroundPaint(Color.white);
		plot.setForegroundAlpha(0.5f);
		return chart;

	}
	
private JFreeChart createChart(CategoryDataset dataset) {
        
        // create the chart...
        final JFreeChart chart = ChartFactory.createBarChart(
            "My Summary",         // chart title
            "Type",               // domain axis label
            "Percentage",                  // range axis label
            dataset,                  // data
            PlotOrientation.VERTICAL, // orientation
            true,                     // include legend
            true,                     // tooltips?
            false                     // URLs?
        );

        // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...

        // set the background color for the chart...
        chart.setBackgroundPaint(Color.white);

        // get a reference to the plot for further customisation...
        final CategoryPlot plot = chart.getCategoryPlot();
        plot.setBackgroundPaint(Color.white);
        plot.setDomainGridlinePaint(Color.white);
        plot.setRangeGridlinePaint(Color.white);

        // set the range axis to display integers only...
        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

        // disable bar outlines...
        final BarRenderer renderer = (BarRenderer) plot.getRenderer();
        //renderer.setSeriesPaint(0,new Color(0,191,255));
        renderer.setSeriesPaint(0, new Color(50,205,50));
        renderer.setSeriesPaint(1, new Color(255,122,122));

        final CategoryAxis domainAxis = plot.getDomainAxis();
        domainAxis.setCategoryLabelPositions(
            CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 6.0)
        );
        // OPTIONAL CUSTOMISATION COMPLETED.
        
        return chart;
        
    }

	private void initPieChart() {
		// PIE CHART IN GENERAL
		// This will create the dataset
		if (pieChartIndex == 1){
			cardGeneral.remove(1);
			cardExpense.remove(1);
			}
		CategoryDataset dataset = createDatasetGeneral();
		JFreeChart chart = createChart(dataset);
		JPanel generalPieChart = new JPanel();
		ChartPanel chartPanel = new ChartPanel(chart);
		generalPieChart.add(chartPanel);
		cardGeneral.add(generalPieChart, "cell 0 0,grow");
		generalPieChart.setLayout(new BoxLayout(generalPieChart,
				BoxLayout.X_AXIS));

		// Pie Chart in Expense
		// This will create the dataset
		PieDataset datasetexpense = createDatasetExpense();
		// based on the dataset we create the chart
		JFreeChart chartExpense = createChart(datasetexpense, "MY EXPENSE");
		ChartPanel chartPanelExpense = new ChartPanel(chartExpense);
		JPanel expensePieChart = new JPanel();
		cardExpense.add(expensePieChart, "cell 0 0,grow");
		expensePieChart.setLayout(new BoxLayout(expensePieChart,
				BoxLayout.X_AXIS));
		expensePieChart.add(chartPanelExpense);
	}

	private void initTable() {
		// Table
		if (pieChartIndex == 1){
			expenseTable.removeAll();
			cardExpense.remove(0);
		}
		tableModel = new InteractiveTableModel(columnNames);
		expenseTable.setLayout(new BoxLayout(expenseTable, BoxLayout.Y_AXIS));
		table = new JTable();
		table.setModel(tableModel);
		table.setAutoCreateRowSorter(true);
		table.setPreferredScrollableViewportSize(new Dimension(20, 10));
		JScrollPane scrollPane = new JScrollPane(table);
		// table.setFillsViewportHeight(true);
		expenseTable.add(Box.createVerticalGlue());
		expenseTable.add(scrollPane);
		expenseTable.add(Box.createVerticalGlue());
		cardExpense.add(expenseTable, "cell 1 0,grow");
	}

	private void initSummary() {
		String record = "record";
		if (myReportData.getNumRecords() > 1)
			record = "records";
		lblNumRecords.setText(""+myReportData.getNumRecords()+ " "+record +" were found");
		myIncome.setLabelAmount(myReportData.getTotalIncome());
		myIncome.setLabelPercentage(myReportData.getIncomePercentage());
		myExpense.setLabelAmount(myReportData.getTotalExpense());
		myExpense.setLabelPercentage(myReportData.getExpensePercentage());
		myBalance.setLabelAmount(myReportData.getBalance());
	}

	/**
	 * TableModel for report
	 * 
	// End of segment: ezxpns\GUI\ReportFrame.java





	/**
	 * origin: ezxpns\GUI\ReportFrame.java
	 */

	 * 
	 */
	public class InteractiveTableModel extends AbstractTableModel {
		public static final int CATEGORY_INDEX = 0;
		public static final int FREQUENCY_INDEX = 1;
		public static final int AMOUNT_INDEX = 2;
		public static final int PERCENTAGE_INDEX = 3;
		public static final int AMTFEQ_INDEX = 4;

		protected String[] columnNames;
		protected Vector<ReportCategory> dataVector;
		
		DecimalFormat money = new DecimalFormat("#,##0.00");        
		DecimalFormat percent = new DecimalFormat("0.0");

		public InteractiveTableModel(String[] columnNames) {
			this.columnNames = columnNames;
			// dataVector = new Vector<ReportCategory>();
			dataVector = myReportData.getExpenseCategory();
		}

		public String getColumnName(int column) {
			return columnNames[column];
		}

		public Class<?> getColumnClass(int column) {
			switch (column) {
			case CATEGORY_INDEX:
				return String.class;
			case FREQUENCY_INDEX:
				return Integer.class;
			case AMOUNT_INDEX:
				return Double.class;
			case PERCENTAGE_INDEX:
				return Double.class;
			case AMTFEQ_INDEX:
				return Double.class;
			default:
				return String.class;
			}
		}

		public Object getValueAt(int row, int column) {
			ReportCategory report = (ReportCategory) dataVector.get(row);
			switch (column) {
			case CATEGORY_INDEX:
				return report.getCategory();
			case FREQUENCY_INDEX:
				return report.getFrequency();
			case AMOUNT_INDEX:
				return report.getAmount();
			case PERCENTAGE_INDEX:
				return report.getPercentage();
			case AMTFEQ_INDEX:
				return report.getAmtPerFreq();
			default:
				return new Object();
			}
		}

		public int getRowCount() {
			return dataVector.size();
		}

		public int getColumnCount() {
			return columnNames.length;
		}
	}
	
	/**
	 * Colored square for report
	// End of segment: ezxpns\GUI\ReportFrame.java





	/**
	 * origin: ezxpns\GUI\ReportFrame.java
	 */

	 *
	 */
	public class ColorSquare extends JPanel{
		
		private JLabel lblName = new JLabel("");
		private JLabel lblAmount = new JLabel("");
		private JLabel lblPercentage = new JLabel("");
		private int WIDTH = 200;
		private int HEIGHT = 20;
		DecimalFormat formatter = new DecimalFormat("#,##0.00");        
		DecimalFormat df = new DecimalFormat("#.#");
		
		public ColorSquare(String name){
			this.setLabelName(name);
			this.setLayout(new MigLayout("","[50][50][15]","[10][10]"));
			this.setPreferredSize(new Dimension(WIDTH, HEIGHT));
			this.add(lblName,"span 2");
			this.add(lblPercentage, "wrap");
			this.add(lblAmount, "span 3");
		}
		
		public void changeBackground(Color myColor){
			this.setBackground(myColor);
		}
		
		public void setLabelName(String name){
			lblName.setText(name);
			lblName.setForeground(Color.WHITE);
			lblName.setFont(new Font("Lucida Grande", Font.BOLD, 14));
		}
		
		public void setLabelAmount(double amount){
			lblAmount.setText("$"+ formatter.format(amount));
			lblAmount.setForeground(Color.WHITE);
		}
		
		public void setLabelPercentage(double percent){
			lblPercentage.setText(""+df.format(percent)+"%");
			lblPercentage.setForeground(Color.WHITE);
		}
		
		
	}
}
	// End of segment: ezxpns\GUI\ReportFrame.java





	/**
	 * origin: ezxpns\GUI\SavingsOverviewPanel.java
	 */

 */
@SuppressWarnings("serial")
public class SavingsOverviewPanel extends JPanel {

	private NWSGenerator nwsGen;
	private NWSBarPanel myBars;
	private int DONUT_DIM = 250;

	public SavingsOverviewPanel(NWSGenerator dataGenerator) {
		super();
		nwsGen = dataGenerator;
		setLayout(new BorderLayout());
		JLabel lblNWS = new JLabel("Needs, Wants, Savings");
		lblNWS.setHorizontalAlignment(SwingConstants.CENTER);
		lblNWS.setFont(new Font("Lucida Grande", Font.PLAIN, 20));
		this.add(lblNWS, BorderLayout.NORTH);
		
		drawBars();
	}
	
	/**
	 * Draw the bar chart for NWS
	 */
	private void drawBars(){
		if (myBars != null)
			this.remove(myBars);
		myBars = new NWSBarPanel(nwsGen);
		this.add(myBars, BorderLayout.CENTER);
	}

	/**
	 * This is the method to call to update this panel
	 */
	public void update() {
		nwsGen.updateNWSdata(); 
		drawBars();
		this.validate();
	}

	/**
	 * A bar chart displaying Needs, Wants, and Savings information
	// End of segment: ezxpns\GUI\SavingsOverviewPanel.java





	/**
	 * origin: ezxpns\GUI\SavingsOverviewPanel.java
	 */

	 *
	 */
	public class NWSBarPanel extends JPanel {

		double[] value;
		double[] target;
		String[] type = { "Needs", "Wants", "Savings" };
		ExpenseType[] exType = { ExpenseType.NEED,ExpenseType.WANT, ExpenseType.SAVE};
        DecimalFormat df = new DecimalFormat("#.##");

		
		NWSdata nwsData;

		public NWSBarPanel(NWSGenerator nwsGen) {
			this.nwsData = nwsGen.getNWSdataCopy();
			value = new double[]{nwsData.getCurrNeedsRatio()*100, nwsData.getCurrWantsRatio()*100, nwsData.getCurrSavingsRatio()*100}; 
			target = new double[]{nwsData.getTargetNeedsRatio()*100, nwsData.getTargetWantsRatio()*100, nwsData.getTargetSavingsRatio()*100};
		}

		

		public void paintComponent(Graphics g) {
			super.paintComponent(g);
			Graphics2D g2d = (Graphics2D) g;

			if (value == null || value.length == 0)
				return;
			double minValue = 0;
			double maxValue = 0;
			for (int i = 0; i < value.length; i++) {
				if (minValue > value[i])
					minValue = value[i];
				if (maxValue < value[i])
					maxValue = value[i];
			}
			for (int i = 0; i < target.length; i++) {
				if (minValue > target[i])
					minValue = target[i];
				if (maxValue < target[i])
					maxValue = target[i];
			}
			Dimension dim = getSize();
			int clientWidth = dim.width;
			int clientHeight = dim.height;
			int barWidth = 50;
			Font labelFont = new Font("Book Antiqua", Font.BOLD, 15);
			FontMetrics labelFontMetrics = g.getFontMetrics(labelFont);
			Font ratioFont = new Font("Book Antiqua", Font.PLAIN, 15);
			FontMetrics ratioFontMetrics = g.getFontMetrics(ratioFont);
			int bottom = labelFontMetrics.getHeight() * 2;
			if (maxValue == minValue)
				return;
			if (maxValue > 100)
				maxValue = Math.log(maxValue-100) + 100;
			double scale = (clientHeight - bottom) / (maxValue - minValue);
			int q = clientHeight - labelFontMetrics.getDescent();
			g.setFont(labelFont);

			for (int j = 0; j < value.length; j++) {
				int valueP = j * 2 * barWidth + (clientWidth/5);
				int valueQ = 0;
				int valueQT = 0;
				int height = (int) (value[j] * scale);
				int targetHeight = (int) (target[j] * scale);
				if (value[j] >= 0)
					valueQ += (int) ((maxValue - value[j]) * scale);
				else {
					valueQ += (int) (maxValue * scale);
					height = -height;
				}
				if (target[j] >= 0)
					valueQT += (int) ((maxValue - target[j]) * scale);
				else{
					valueQT += (int) (maxValue * scale);
					targetHeight = -targetHeight;
				}
				
				g.setColor(exType[j].getNormalColor());
				g.fillRect(valueP, valueQ, barWidth - 2, height);
				g2d.setColor(exType[j].getExceedColor());
				g2d.setStroke(new BasicStroke(4));
				g2d.drawRect(valueP, valueQT, barWidth - 2, targetHeight);
				g.setColor(Color.black);
				int labelWidth = labelFontMetrics.stringWidth(type[j]);
				int ratioWidth = ratioFontMetrics.stringWidth(""+df.format(value[j])+"%/"+df.format(target[j])+"%");
				int p = j * 2 * barWidth + (clientWidth/5) + (barWidth - labelWidth) / 2;
				int pRatio = j * 2 * barWidth + (clientWidth/5) + (barWidth - ratioWidth) / 2;
				g.setFont(labelFont);
				g.drawString(type[j], p, q - ratioFontMetrics.getAscent());
				g.setFont(ratioFont);
				g.drawString(""+df.format(value[j])+"%/"+df.format(target[j])+"%", pRatio, clientHeight - ratioFontMetrics.getDescent());
			}
		}
	}
}

	// End of segment: ezxpns\GUI\SavingsOverviewPanel.java





	/**
	 * origin: ezxpns\GUI\SearchPanel.java
	 */

 */
@SuppressWarnings("serial")
class InfoPanel extends JPanel {
	private JLabel lblNumRec;
	private JLabel lblTotalAmt;
	private DecimalFormat df = new DecimalFormat("$###,###,##0.00");
	
	public InfoPanel(){
		setLayout(new MigLayout("","1[]15[]","0[]0"));
		setPreferredSize(new Dimension(600, 25));
		this.setBorder(BorderFactory.createLoweredBevelBorder());
		this.add(getNumRecLabel());
		this.add(getTotalAmtLabel());
	}
	
	/**
	 * @return a JLabel object to label Sum of records
	 */
	private JLabel getNumRecLabel() {
		if (lblNumRec == null){
			lblNumRec = new JLabel("No. of Records: - ");
		}
		return lblNumRec;
	}

	/**
	 * @return a JLabel object to label Total Amount
	 */
	private JLabel getTotalAmtLabel() {
		if (lblTotalAmt == null){
			lblTotalAmt = new JLabel("Total Amount: - ");
		}
		return lblTotalAmt;
	}

	/**
	 * @param num Number to set as the sum of records
	 */
	public void setNumRec(int num){
		lblNumRec.setText("No. of Records: " +  num);
	}
	
	/**
	 * @param num Number to set as the total amount
	 */
	public void setTotalAmt(double num){
		lblTotalAmt.setText("Balance: " + df.format(num)); // 2 decimal place later
	}
}

	// End of segment: ezxpns\GUI\SearchPanel.java





	/**
	 * origin: ezxpns\GUI\TargetOverviewPanel.java
	 */

	 * 
	 */
	public class BarGraphic extends JPanel {

		private Bar bar;
		private int WIDTH = 150;
		private int HEIGHT = 40;
		private int X = 15;

		// Constructor: Add values for target/ratio
		public BarGraphic(Bar bar) {
			this.bar = bar;
		}

		public void paintComponent(Graphics g) {
			super.paintComponent(g);
			g.setColor(Color.GRAY); // base color
			g.fillRect(0, X, WIDTH, HEIGHT); // x, y, width, height
			g.setColor(bar.getBarColor().getColor());
			double remaining = bar.getRemainingAmt();
			int barWidth = (int) ((bar.getCurrentAmt() / bar.getTargetAmt()) * WIDTH);
			if (barWidth > WIDTH)
				barWidth = 150;
			g.fillRect(0, X, barWidth, HEIGHT);
			
			//font
			Font percentage = new Font("Book Antiqua", Font.BOLD, 15);
			FontMetrics percentageFontMetrics = g.getFontMetrics(percentage);
			String stringPercentage = "" + TWO_DP.format(bar.getCurrentPercentage()) + "%";
			g.setColor(Color.WHITE);
			g.drawString(stringPercentage, WIDTH-percentageFontMetrics.stringWidth(stringPercentage),HEIGHT);
		}
	}
}

	// End of segment: ezxpns\GUI\TargetOverviewPanel.java





	/**
	 * origin: test\SummaryTest.java
	 */

 *
 */
public class SummaryTest {
	
	SummaryGenerator.DataProvider data;
	SummaryGenerator summaryTest;
	double EPSILON = 0.001;

	public SummaryTest(){
		data = new SummaryGenerator.DataProvider() {
			
			@Override
			public double getYearlyIncome() {
				// TODO Auto-generated method stub
				return 8000;
			}
			
			@Override
			public double getYearlyExpense() {
				// TODO Auto-generated method stub
				return 10000.00;
			}
			
			@Override
			public double getTotalIncome() {
				// TODO Auto-generated method stub
				return 50000.28;
			}
			
			@Override
			public double getTotalExpense() {
				// TODO Auto-generated method stub
				return 40000.99;
			}
			
			@Override
			public double getMonthlyIncome() {
				// TODO Auto-generated method stub
				return 500;
			}
			
			@Override
			public double getMonthlyExpense() {
				// TODO Auto-generated method stub
				return 300;
			}
			
			@Override
			public double getDailyIncome() {
				// TODO Auto-generated method stub
				return 0;
			}
			
			@Override
			public double getDailyExpense() {
				// TODO Auto-generated method stub
				return 0;
			}
		};
		summaryTest = new SummaryGenerator(data);
	}
	
	@Test
	public void testToday() {
		SummaryDetails today = summaryTest.getSummaryDetails(SummaryType.TODAY);
		assertEquals(0, today.getBalance(),EPSILON);
	}
	
	@Test
	public void testMonth() {
		SummaryDetails month = summaryTest.getSummaryDetails(SummaryType.MONTH);
		assertEquals(200, month.getBalance(),EPSILON);
	}
	
	@Test
	public void testYear() {
		SummaryDetails year = summaryTest.getSummaryDetails(SummaryType.YEAR);
		assertEquals(-2000, year.getBalance(),EPSILON);
	}
	
	@Test
	public void testAll() {
		SummaryDetails all = summaryTest.getSummaryDetails(SummaryType.ALLTIME);
		assertEquals(9999.29, all.getBalance(),EPSILON);
	}

}

	// End of segment: test\SummaryTest.java





