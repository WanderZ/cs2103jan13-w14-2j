//@author: a0097973



	/**
	 * origin: ezxpns\data\records\RecordHandler.java
	 */

	// End of segment: ezxpns\data\records\RecordHandler.java





	/**
	 * origin: ezxpns\GUI\Config.java
	 */

 */
public class Config {
	
	/**
	 * The default width for menu button
	 */
	public static final int DEFAULT_MENU_WIDTH = 134;
	
	/**
	 * The default height for menu button
	 */
	public static final int DEFAULT_MENU_HEIGHT = 30;
	
	/**
	 * The default width for the GUI window 
	 */
	public static final int DEFAULT_UI_WIDTH = 1280;
	
	/**
	 * The default height for the GUI window
	 */
	public static final int DEFAULT_UI_HEIGHT = 720;
	
	/**
	 * The minimum width for the GUI window
	 */
	public static final int MIN_UI_WIDTH = 1130;
	
	/**
	 * The minimum height for the GUI window
	 */
	public static final int MIN_UI_HEIGHT = 650;
	
	/**
	 * The default width for the dialog window 
	 */
	public static final int DEFAULT_DIALOG_WIDTH = 600;
	
	/**
	 * The default height for the dialog height
	 */
	public static final int DEFAULT_DIALOG_HEIGHT = 400; 
	
	/**
	 * The preset font for title - size set at 24
	 */
	public static final Font TITLE_FONT = new Font("Segoe UI", 0, 24);
	
	/**
	 * The preset font for menu buttons - size set at 20
	 */
	public static final Font MENU_FONT = new Font("Segoe UI", 0, 16);
	
	/**
	 * The preset font for normal text - size set at 14
	 */
	public static final Font TEXT_FONT = new Font("Segoe UI", 0, 14);
	
	/**
	 * The preset money format for currency $###,###,##0.00
	 */
	public static final DecimalFormat MONEY_FORMAT = new DecimalFormat("$###,###,##0.00");
	
	/**
	 * The preset maximum amount for each record - One million
	 */
	public static final int DEFAULT_MAX_AMT_PER_RECORD = 1000000; // One million
	
	/**
	 * The preset minimum amount for each record - 1 cent
	 */
	public static final double DEFAULT_MIN_AMT_PER_RECORD = 0.01;
		
	/**
	 * The preset maximum name length 
	 */
	public static final int DEFAULT_MAX_LENGTH_NAME = 50;
	
	/**
	 * The preset maximum name length 
	 */
	public static final int DEFAULT_MAX_LENGTH_DESC = 250;
	
	/**
	 * Alphanumeric pattern matcher
	 */
	public static final Pattern ALPHANUMERIC = RecordManager.INVALIDNAME;
	
	private Config(){}
	
	public static boolean isAlphaNumeric(String text) {
		return ALPHANUMERIC.matcher(text).find();
	}
}

	// End of segment: ezxpns\GUI\Config.java





	/**
	 * origin: ezxpns\GUI\ExpenseForm.java
	 */

 */
@SuppressWarnings("serial")
public class ExpenseForm extends RecordForm {
		
	// #Swing Components
	private ButtonGroup bgType;
	private JRadioButton rbtnNeed, rbtnWant;

	/**
	 * The Record reference to the provided record
	 */
	private ExpenseRecord record;
	
	/**
	 * Create a Form for new expense records
	 * @param recHandlerRef RecordHandler reference to manage ExpenseRecords
	 * @param catHandlerRef CategoryHandler reference to manage Expense Categories
	 * @param payHandlerRef PaymentMethodHandler reference to manage payment methods
	 * @param undoMgrRef UndoManager reference to manage possible undo actions
	 */
	public ExpenseForm(
			RecordHandler recHandlerRef, 
			CategoryHandler<ExpenseRecord> catHandlerRef, 
			UpdateNotifyee notifyeeRef) {
//		cal = Calculator.getInstance();
		super();
		recHandler = recHandlerRef; 
		catHandler = catHandlerRef;
		notifyee = notifyeeRef;
		
		categories = catHandler.getAllCategories();
//		methods = payHandler.getAllPaymentMethod();
		this.initFields();
		isEdit = false;
	}
	
	/**
	 * Create a Form for existing expense records
	 * @param recHandlerRef RecordHandler reference to manage ExpenseRecords
	 * @param catHandlerRef CategoryHandler reference to manage Expense Categories
	 * @param payHandlerRef PaymentMethodHandler reference to manage payment methods
	 * @param undoMgrRef UndoManager reference to manage possible undo actions
	 * @param record ExpenseRecord reference - existing record indicated by user to be modified
	 */
	public ExpenseForm(
			RecordHandler recHandlerRef, 
			CategoryHandler<ExpenseRecord> catHandlerRef, 
			UpdateNotifyee notifyeeRef,
			ExpenseRecord record) {
		
		this(recHandlerRef, catHandlerRef, notifyeeRef);
		
		this.record = record;
		isEdit = true;
		this.populateFields();
	}
	
	/**
	 * To populate all the fields with the given record's data
	 */
	private void populateFields() {
		blockAutoFill = true;
		// Name
		if(isEdit){
			if(!txtName.getText().equals(record.getName())) txtName.setText(record.getName());
		}
		
		// Amount
		this.setAmt(record.getAmount());
		
		// Category
		cboxCat.setSelectedIndex(categories.indexOf(record.getCategory()));
		
		// Payment Method
//		cboxPay.setSelectedIndex(methods.indexOf(record.getPaymentMethod()));
		
		// Date - populated only if editing
		txtDateChooser.setDate(isEdit ? record.getDate() : new Date()); 
		
		// Need or Want
		selectExpenseType(record.getExpenseType());
		
		// Description
		txtDesc.setText(record.getRemark());
		
		// Recurrence stuff...
		// Not handled at the moment
		
		blockAutoFill = false;
	}
	
	/** 
	 * Selects the ExpenseType 
	 * @param type the ExpenseType enum of the record
	 */
	private void selectExpenseType(ExpenseType type) {
		if(type == ExpenseType.NEED) {
			rbtnNeed.setSelected(true);
		}
		if(type == ExpenseType.WANT) {
			rbtnWant.setSelected(true);
		}
	}
	
//	/** Populates the Payment Methods Drop down field */
//	private void initPayComboBox() {
//		for(PaymentMethod method: methods) {
//			this.cboxPay.addItem(method.getName());
//		}
//	}
	
	/** 
	 * Initiates all the fields of this panel. 
	 */
	private void initFields() {
		
		/* The Layout governing the positions */
		SpringLayout loForm = new SpringLayout();
		this.setLayout(loForm);
		
		// Initialize Radio Buttons
		lblType = this.createLabel("Type");
		bgType = new ButtonGroup();
		
		rbtnNeed = new JRadioButton(ExpenseType.NEED.name);
		rbtnNeed.setContentAreaFilled(false);
		rbtnNeed.setSelected(true);
		
		rbtnWant = new JRadioButton(ExpenseType.WANT.name);
		rbtnWant.setContentAreaFilled(false);
		
		bgType.add(rbtnNeed);
		bgType.add(rbtnWant);
		
		// Initialize Combo Box - To be a dynamic updating list.
		lblCat = this.createLabel("Category");
		cboxCat = new JComboBox();
		this.populateCategories();
		cboxCat.setEditable(true);
		cboxCat.setPreferredSize(new Dimension(200, 25));
		defaultCBBorder = cboxCat.getBorder();
		
		// Initialize Combo Box - To be a dynamic updating list.
//		lblPayment = this.createLabel("Payment Method");
//		cboxPay = new JComboBox();
//		this.initPayComboBox();
//		cboxPay .setEditable(true);
//		cboxPay.setPreferredSize(new Dimension(200, 25));
		
		lblName = this.createLabel("Name");
		txtName = new JTextField("");
		txtName.setPreferredSize(new Dimension(200, 25));
		defaultTFBorder = txtName.getBorder();
		txtName.getDocument().addDocumentListener(new DocumentListener() {

			@Override
			public void changedUpdate(DocumentEvent e) {
				fill();
			}

			@Override
			public void insertUpdate(DocumentEvent e) {
				fill();
			}

			@Override
			public void removeUpdate(DocumentEvent e) {
				fill();
			}
			
			private void fill(){
				if(blockAutoFill || isEdit) return; 
				ExpenseRecord oldRecord = recHandler.lastExpenseRecord(txtName.getText());
				if(oldRecord!=null) {
					record = oldRecord;
					populateFields();
				}
			}
		
		});
		txtName.addFocusListener(new FocusListener() {
			@Override
			public void focusGained(FocusEvent arg0) {
				txtName.selectAll();
			}

			@Override
			public void focusLost(FocusEvent arg0) {
				// TODO: Validate name
			}
		});
		
		this.add(lblName);
		this.add(txtName);
		loForm.putConstraint(SpringLayout.WEST, lblName, COL1_PAD, SpringLayout.WEST, this);
		loForm.putConstraint(SpringLayout.WEST, txtName, COL2_PAD, SpringLayout.WEST, this);
		loForm.putConstraint(SpringLayout.NORTH, lblName, TOP_PAD>>2, SpringLayout.NORTH, this);
		loForm.putConstraint(SpringLayout.NORTH, txtName, TOP_PAD>>2, SpringLayout.NORTH, this);
		
//		this.add(lblPayment);
//		this.add(cboxPay);
//		loForm.putConstraint(SpringLayout.WEST, lblPayment, COL1_PAD, SpringLayout.WEST, this);
//		loForm.putConstraint(SpringLayout.WEST, cboxPay, COL2_PAD, SpringLayout.WEST, this);
//		loForm.putConstraint(SpringLayout.NORTH, lblPayment, TOP_PAD, SpringLayout.NORTH, lblName);
//		loForm.putConstraint(SpringLayout.NORTH, cboxPay, TOP_PAD, SpringLayout.NORTH, txtName);
		
		this.add(lblCat);
		this.add(cboxCat);
		loForm.putConstraint(SpringLayout.WEST, lblCat, COL1_PAD, SpringLayout.WEST, this);
		loForm.putConstraint(SpringLayout.WEST, cboxCat, COL2_PAD, SpringLayout.WEST, this);
		loForm.putConstraint(SpringLayout.NORTH, lblCat, TOP_PAD, SpringLayout.NORTH, lblName);
		loForm.putConstraint(SpringLayout.NORTH, cboxCat, TOP_PAD, SpringLayout.NORTH, txtName);
				
		this.add(lblType);
		this.add(rbtnNeed);
		this.add(rbtnWant);
		loForm.putConstraint(SpringLayout.WEST, lblType, COL1_PAD, SpringLayout.WEST, this);
		loForm.putConstraint(SpringLayout.NORTH, lblType, TOP_PAD, SpringLayout.NORTH, lblCat);
		loForm.putConstraint(SpringLayout.WEST, rbtnNeed, COL2_PAD, SpringLayout.WEST, this);
		loForm.putConstraint(SpringLayout.WEST, rbtnWant, COL2_PAD/2, SpringLayout.WEST, rbtnNeed);
		loForm.putConstraint(SpringLayout.NORTH, rbtnNeed, TOP_PAD, SpringLayout.NORTH, cboxCat);
		loForm.putConstraint(SpringLayout.NORTH, rbtnWant, TOP_PAD, SpringLayout.NORTH, cboxCat);
		
		lblAmt = this.createLabel("Amount");
		txtAmt = new JTextField("");
		txtAmt.setPreferredSize(new Dimension(200, 25));
		this.add(lblAmt);
		this.add(txtAmt);
		loForm.putConstraint(SpringLayout.WEST, lblAmt, COL1_PAD, SpringLayout.WEST, this);
		loForm.putConstraint(SpringLayout.WEST, txtAmt, COL2_PAD, SpringLayout.WEST, this);
		loForm.putConstraint(SpringLayout.NORTH, lblAmt, TOP_PAD, SpringLayout.NORTH, rbtnNeed);
		loForm.putConstraint(SpringLayout.NORTH, txtAmt, TOP_PAD, SpringLayout.NORTH, rbtnWant);
		
		/* Calculator is inbuilt here */
		final JLabel lblResult = this.createLabel("");
		this.add(lblResult);
		loForm.putConstraint(SpringLayout.WEST, lblResult, COL1_PAD, SpringLayout.EAST, txtAmt);
		loForm.putConstraint(SpringLayout.NORTH, lblResult, TOP_PAD, SpringLayout.NORTH, rbtnWant);
		txtAmt.getDocument().addDocumentListener(new DocumentListener() {

			@Override
			public void changedUpdate(DocumentEvent arg0) {
				evaluate(lblResult);
			}

			@Override
			public void insertUpdate(DocumentEvent arg0) {
				evaluate(lblResult);
			}

			@Override
			public void removeUpdate(DocumentEvent arg0) {
				evaluate(lblResult);
			}			
		});
		
		txtAmt.addFocusListener(new FocusListener() {

			@Override
			public void focusGained(FocusEvent e) {
				evaluate(lblResult);
				txtAmt.selectAll();
			}

			@Override
			public void focusLost(FocusEvent e) {
				evaluate(lblResult);
			}
			
		});

		lblDate = this.createLabel("Date");
		// JDateChooser stuff starts here (tingzhe)
		txtDateChooser = new JDateChooser(new Date());
		txtDateChooser.getJCalendar().setTodayButtonVisible(true);
		txtDateChooser.setDateFormatString("dd/MM/yyyy");
		txtDateChooser.setMaxSelectableDate(new Date());
		PropertyChangeListener calendarChangeListener  = new PropertyChangeListener() {
	        @Override
	        public void propertyChange(PropertyChangeEvent evt) {
	            Date selectedDate = ((JCalendar)evt.getSource()).getDate();
	        }
	    };
		txtDateChooser.setPreferredSize(new Dimension(200, 25));
		txtDateChooser.setBorder(BorderFactory.createEmptyBorder());
	    // JDateChooser stuff ends here (tingzhe)
		this.add(lblDate);
		this.add(txtDateChooser);
		loForm.putConstraint(SpringLayout.WEST, lblDate, COL1_PAD, SpringLayout.WEST, this);
		loForm.putConstraint(SpringLayout.WEST, txtDateChooser, COL2_PAD, SpringLayout.WEST, this);
		loForm.putConstraint(SpringLayout.NORTH, lblDate, TOP_PAD, SpringLayout.NORTH, lblAmt);
		loForm.putConstraint(SpringLayout.NORTH, txtDateChooser, TOP_PAD, SpringLayout.NORTH, txtAmt);

		lblDesc = this.createLabel("Remarks");
		txtDesc = new JTextArea();
		txtDesc.setPreferredSize(new Dimension(200, 100));
		txtDesc.setBorder(defaultTFBorder);
		txtDesc.setWrapStyleWord(true);
		txtDesc.setLineWrap(true);
		this.add(lblDesc);
		this.add(txtDesc);
		loForm.putConstraint(SpringLayout.WEST, lblDesc, COL1_PAD, SpringLayout.WEST, this);
		loForm.putConstraint(SpringLayout.WEST, txtDesc, COL2_PAD, SpringLayout.WEST, this);
		loForm.putConstraint(SpringLayout.NORTH, lblDesc, TOP_PAD, SpringLayout.NORTH, lblDate);
		loForm.putConstraint(SpringLayout.NORTH, txtDesc, TOP_PAD, SpringLayout.NORTH, txtDateChooser);
				
		// Request focus in txtName
		txtName.requestFocusInWindow();
	}
	
	/**
	 * Access method to retrieve the user entered name for this record
	 * @return the string input user entered the name
	 */
	public String getName() {return this.txtName.getText().trim();}
	
	/**
	 * Access method to retrieve the user entered amount for this record
	 * @return the string input user entered for the amount
	 */
	public String getAmt() {return this.txtAmt.getText().trim();}
	
	/**
	 * Access method to retrieve the user specified category (name)
	 * @return the Category chosen by the user
	 */
	public Category getCat() {
		if(isNewCategory()) {
			// User defined new category
			String userInput = this.cboxCat.getSelectedItem().toString().trim();
			return new Category(userInput); 
		}
		// Else find the selected Category
		return categories.get(cboxCat.getSelectedIndex());
	}
	
	/**
	 * Retrieves the user entered description
	 * @return a String containing the description/remarks
	 */
	public String getDesc() {return txtDesc.getText().trim();}
	
	/**
	 * Retrieve the type field for the form
	 * @return ExpenseType.Need if it is a need, otherwise ExpenseType.Want 
	 */
	public ExpenseType getType() {
		return isNeed() ? ExpenseType.NEED : ExpenseType.WANT ;
	}
	
	/**
	 * Retrieve if the type field is a need
	 * @return true if user indicated record as need, otherwise false
	 */
	public boolean isNeed() {
		return this.rbtnNeed.isSelected();
	}
	
	/**
	 * to validate the fields entered into the system.
	 * @return true is there is no problem with inputs, else false;
	 */
	public boolean validateFields() {
		boolean validateSuccess = true;
		StringBuilder errMsg = new StringBuilder();
		
		if(!validateName(errMsg)) {
			this.markErr(txtName);
			validateSuccess = false;
		}
		else {
			this.unmarkErr(txtName);
		}
		
		if(!validateAmt(errMsg)) {
			this.markErr(txtAmt);
			validateSuccess = false;
		}
		else {
			this.unmarkErr(txtAmt);
		}
		
		if(!validateDate(errMsg)) {
			validateSuccess = false;
		}
		
		if(!validateCategory(errMsg)) {
			this.markErr(cboxCat);
			validateSuccess = false;
		}
		else {
			this.unmarkErr(cboxCat);
		}
		
		if(!validateDescription(errMsg)) {
			this.markErr(txtDesc);
			validateSuccess = false;
		}
		else {
			this.unmarkErr(txtDesc);
		}
		
		if(!validateSuccess) displayErr(errMsg.toString()); // Failed
		return validateSuccess;
	}
	
	@Override
	public Record save() {
		try {
		ExpenseRecord eRecord = new ExpenseRecord(
				evaluate(), 					// the amount - double might not suffice
				this.getName(),										// the name reference of the record
				this.getDesc(),										// the description/remarks for this record, if any
				this.getDate(),										// Date of this record (in user's context, not system time)
				this.getCat(),										// Category of this record
				this.getType() 									// The ExpenseType of the record (need/want)
			);
			if(isEdit) {
				this.recHandler.modifyRecord(record.getId(), eRecord, isNewCategory(), isNewMethod());
			}
			else {
				eRecord = this.recHandler.createRecord(eRecord, isNewCategory());
			}
			notifyee.addUndoAction(createUndoAction(eRecord, isNewCategory(), isNewMethod()), isEdit ? "Edit Expense" : "New Expense");
			return eRecord;
		}
		catch(Exception e) {
			// Something went wrong
			System.out.println("error in creating record");
		}
		return null;
	}
	
	/**
	 * create an action to undo what was just done by the user
	 * @param nExpense new ExpenseRecord that was just created by user 
	 * @param isNewCat true for new category, otherwise false
	 * @param isNewPay true for new payment method, otherwise false
	 * @return AbstractAction undo action
	 */
	private AbstractAction createUndoAction(final ExpenseRecord nExpense, final boolean isNewCat, final boolean isNewPay) {
		final ExpenseRecord record = this.record; // Making sure that the record will not get edited
		return new AbstractAction() {
			@Override
			public void actionPerformed(ActionEvent event) {
				if(isEdit) {
					recHandler.modifyRecord(record.getId(), record, isNewCat, isNewPay);
				}
				else {
					recHandler.removeRecord(nExpense.getId());
				}
				if(isNewCat) {
					catHandler.removeCategory(nExpense.getCategory().getID());
				}
			}
		};
	}
}
	// End of segment: ezxpns\GUI\ExpenseForm.java





	/**
	 * origin: ezxpns\GUI\EzNavigator.java
	 */

 */
@SuppressWarnings("serial")
public class EzNavigator extends JLayeredPane {

	/**
	 * CardLayout to manage the different content panels
	 */
	private CardLayout contentMgr;
	
	/**
	 * The parent content panel that will do the switching of panels
	 */
	private JLayeredPane content;
	
	/**
	 * UIControl - to manipulate the Panels 
	 */
	private UIControl uiCtrl;
	
	/**
	 * JToggleButton reference to the undo button
	 */
	private JToggleButton btnUndo;
	
	/**
	 * JToggleButton reference to the selected button 
	 */
	private JToggleButton selected;
	
	private EzNavigator(UIControl uiCtrl) {
		super();
		this.uiCtrl = uiCtrl;
		this.setDoubleBuffered(true);
		this.setLayout(new GridBagLayout());
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.fill = GridBagConstraints.BOTH;
		
		gbc.weightx = 1;
		gbc.weighty = 1;
		
		AbstractButton btn;
		ButtonGroup btnGrp = new ButtonGroup();
		
		// Adding the LOGO
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.insets = new Insets(0, 0, 0, 0);
		gbc.anchor = GridBagConstraints.NORTH;
		LogoIcon ezxpnsLogo = new LogoIcon();
		this.add(ezxpnsLogo, gbc);
		gbc.weighty = 0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		// End of LOGO
		
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.insets = new Insets(5, 5, 5, 5);
		
		/* Insert First Button here */
		btn = createMenuBtn(NormalMenuOpt.REVERT);
		btnUndo = (JToggleButton) btn; // Stored for cosmetic updates
		this.add(btn, gbc);
		btnGrp.add(btn);
		btnUndo.setAction(uiCtrl.getUndoMgr().getAction());
		btnUndo.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				btnUndo.setSelected(false);
			}
		});
//		btnUndo.setBorderPainted(btnUndo.isEnabled());
		
		gbc.gridx = 0;
		gbc.gridy = 2;
		/* Insert Second Button here */
		btn = createMenuBtn(new NewExpenseDialog(this.uiCtrl));
		this.add(btn, gbc);
		btnGrp.add(btn);
		/* Button ends*/
		
		gbc.gridx = 0;
		gbc.gridy = 3;
		/* Insert Third Button here */
		btn = createMenuBtn(new NewIncomeDialog(this.uiCtrl));
		this.add(btn, gbc);
		btnGrp.add(btn);
		/* Button ends*/
		
		gbc.gridx = 0;
		gbc.gridy = 4;
		/* Insert Fourth Button here */
		btn = createMenuBtn(NormalMenuOpt.DASHBD);
		this.add(btn, gbc);
		btnGrp.add(btn);
		btn.setSelected(true);
//		btn.setBorder(BorderFactory.createLoweredBevelBorder());
		selected = (JToggleButton) btn;
		/* Button ends*/
		
		gbc.gridx = 0;
		gbc.gridy = 5;
		/* Insert Fifth Button here */
		btn = createMenuBtn(NormalMenuOpt.SEARCH);
		this.add(btn, gbc);
		btnGrp.add(btn);
		/* Button ends*/
		
		gbc.gridx = 0;
		gbc.gridy = 6;
		/* Insert Sixth Button here */
		btn = createMenuBtn(NormalMenuOpt.CATMGR);
		this.add(btn, gbc);
		btnGrp.add(btn);
		/* Button ends*/
		
		gbc.gridx = 0;
		gbc.gridy = 7;
		/* Insert Seventh Button here */
		
		// To create the space between the last button and the bottom
		gbc.insets = new Insets(5, 5, 250, 5); 
		btn = createMenuBtn(new ReportDialog(this.uiCtrl));
		this.add(btn, gbc);
		btnGrp.add(btn);
		/* Button ends*/
		
//		btn = createMenuBtn(NormalMenuOpt.PAYMGR);
//		gbc.gridx = 0;
//		gbc.gridy = 7;
//		this.add(btn, gbc);
	}
	
	/**
	 * Updates the undo button cosmetics
	 */
	public void updateUndoBtn() {
		btnUndo.setBorderPainted(btnUndo.isEnabled());
		btnUndo.setSelected(false);
	}
	
	/**
	 * Constructs a Navigator
	 * @param contentMgrRef CardLayout object that will manage the content switching
	 * @param contentPane JLayeredPane object that will be hosting all the content (content Placeholder)
	 */
	public EzNavigator(UIControl uiCtrl, CardLayout contentMgrRef, JLayeredPane contentPane) {
		this(uiCtrl);
		this.contentMgr = contentMgrRef;
		this.content = contentPane;
	}
	
	/**
	 * Navigates the content panel
	 * @param card MenuCard to be called
	 */
	public void navigate(NormalMenuOpt option) {
		contentMgr.show(content, option.toString());
	}
	
	/**
	 * Opens a new dialog
	 * @param option the DialogMenuOpt reference to open the dialog
	 */
	public void navigate(DialogMenuOpt option) {
		option.openDialog();
	}
	
	/**
	 * Links the button to the card
	 * @param btn JButton to be linked
	 * @param card MenuOption card to be linked to
	 */
	public void linkNavi(AbstractButton btn, MenuOption card) {
		if(card instanceof NormalMenuOpt) {
			linkNormalMenuOpt((JToggleButton) btn, (NormalMenuOpt) card);
		}
		if(card instanceof DialogMenuOpt) {
			linkDiagMenuOpt((JButton) btn, (DialogMenuOpt) card);
		}
	}
	
	
	/**
	 * Links the provided button to a dialog
	 * @param btn JButton Object to be linked
	 * @param option DialogMenuOpt to be linked to
	 */
	public void linkDiagMenuOpt(JButton btn, final DialogMenuOpt option) {
		btn.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent event) {
				navigate(option);
			}
		});
	}
	
	/**
	 * Links the provided button to a panel
	 * @param btn JButton Object to be linked
	 * @param option NormalMenuOpt to be linked to
	 */
	public void linkNormalMenuOpt(JToggleButton btn, final NormalMenuOpt option) {
		btn.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent event) {
				navigate(option);
			}
		});
	}
	
	/**
	 * Creates a Menu button for the navigator
	 * @param card MenuCard Object to tag button to
	 * @return a JButton object tagged to the given MenuCard.
	 */
	private JToggleButton createMenuBtn(NormalMenuOpt option) {
		JToggleButton btn = new JToggleButton(option.toString());
//		btn.setContentAreaFilled(false);
//		btn.setBorder(BorderFactory.createRaisedBevelBorder());
//		btn.setFocusPainted(false);
		btn.setFont(Config.MENU_FONT);
		linkNavi(btn, option);
		btn.addMouseListener(new MouseAdapter() {
//			@Override
//			public void mousePressed(MouseEvent mEvent) {
//				JToggleButton btn = (JToggleButton) mEvent.getSource();
//				if(btn != selected)
//					btn.setBorder(BorderFactory.createLoweredBevelBorder());
//			}
			
			@Override
			public void mouseClicked(MouseEvent mEvent) {
				JToggleButton btn = (JToggleButton) mEvent.getSource();
				if(btn == btnUndo) {
//					btn.setBorder(BorderFactory.createRaisedBevelBorder());
					btnUndo.setSelected(false);
					selected.setSelected(true);
					return;
				}
				if(btn != selected) {
//					selected.setBorder(BorderFactory.createRaisedBevelBorder());
					selected = btn;
				}
			}
//			
//			@Override
//			public void mouseExited(MouseEvent mEvent) { // Hover end
//				JToggleButton btn = (JToggleButton) mEvent.getSource();
//				if(btn != selected)
//					btn.setBorder(BorderFactory.createRaisedBevelBorder());
//			}
		});
		return btn;
	}
	
	/**
	 * Creates a JButton for the navigator that will open dialogs
	 * @param option
	 * @return
	 */
	private JButton createMenuBtn(DialogMenuOpt option) {
		JButton btn = new JButton(option.toString());
//		btn.setContentAreaFilled(false);
//		btn.setBorder(BorderFactory.createRaisedBevelBorder());
//		btn.setFocusPainted(false);
		btn.setFont(Config.MENU_FONT);
		linkNavi(btn, option);
//		btn.addMouseListener(new MouseAdapter() {
//			@Override
//			public void mousePressed(MouseEvent mEvent) {
//				JToggleButton btn = (JToggleButton) mEvent.getSource();
//				btn.setBorder(BorderFactory.createLoweredBevelBorder());
//			}
//			
//			@Override
//			public void mouseClicked(MouseEvent mEvent) {
//				JButton btn = (JButton) mEvent.getSource();
//				btn.setBorder(BorderFactory.createRaisedBevelBorder());
//			}
//			
//			@Override
//			public void mouseReleased(MouseEvent mEvent) {
//				JButton btn = (JButton) mEvent.getSource();
//				btn.setBorder(BorderFactory.createRaisedBevelBorder());
//			}
//		});
		return btn;
	}
}

/**
 * Generic Menu Option
 */
interface MenuOption {}

/**
 *	Defines the normal menu buttons for the EzNavigator
 */
enum NormalMenuOpt implements MenuOption {
	
	NEWRCD 	("New Record"), 			// Maybe this isn't an option
	SEARCH 	("Search"),					// inclusive of Advanced Search
	CATMGR 	("Manage Category"),		
	PAYMGR 	("Manage Payments"),		// TODO: Remove @Yujian
	TARGET 	("Manage Targets"),			// TODO: Is that the one to keep?
	DASHBD 	("Dashboard"),
	CONFIG	("Configurations"),			// Future implementation
	REVERT	("Undo");
	
	
	public final String name;
	private NormalMenuOpt(String name) {this.name = name;}
	
	@Override
	public String toString() {
		return this.name;
	}
}

/**
 * Defines a Dialog Menu Option for EzNavigator
 */
abstract class DialogMenuOpt implements MenuOption {
	
	protected String name;
	protected UIControl uiCtrl;
	
	public DialogMenuOpt(String name, UIControl uiCtrlRef) {
		this.name = name;
		this.uiCtrl = uiCtrlRef;
	}
	
	public String toString() {
		return this.name;
	}
	public abstract void openDialog();
}


/**
 * Defines a Dialog Menu Option for EzNavigator to link to new income dialog
 */
class NewIncomeDialog extends DialogMenuOpt {
	
	public NewIncomeDialog(UIControl uiCtrl) {
		super("New Income", uiCtrl);
	}

	@Override
	public void openDialog() {
		// TODO Auto-generated method stub
		uiCtrl.showRecWin(RecordDialog.TAB_INCOME);
	}	
}

/**
 * Defines a Dialog Menu Option for EzNavigator to link to new expense dialog
 */
class NewExpenseDialog extends DialogMenuOpt {
	
	public NewExpenseDialog(UIControl uiCtrl) {
		super("New Expense", uiCtrl);
	}

	@Override
	public void openDialog() {
		uiCtrl.showRecWin(RecordDialog.TAB_EXPENSE);
	}
}

/**
 * Defines a Dialog Menu Option for EzNavigator to link to the report dialog
 */
class ReportDialog extends DialogMenuOpt {
	
	public ReportDialog(UIControl uiCtrl) {
		super("Generate Report", uiCtrl);
	}

	@Override
	public void openDialog() {
		uiCtrl.showReportWin();
	}
}
	// End of segment: ezxpns\GUI\EzNavigator.java





	/**
	 * origin: ezxpns\GUI\IncomeForm.java
	 */

 */
@SuppressWarnings("serial")
public class IncomeForm extends RecordForm {
	
	private CategoryHandler<IncomeRecord> catHandler; 
	
	/**
	 * The Record reference to the provided record
	 */
	private IncomeRecord record;
	
	/**
	 * Create a form for a new income record
	 * @param recHandlerRef RecordHandler reference to manage records
	 * @param catHandlerRef CategoryHandler reference to manage categories
	 */
	public IncomeForm(
			RecordHandler recHandlerRef, 
			CategoryHandler<IncomeRecord> catHandlerRef,
			UpdateNotifyee notifyeeRef) {
//		cal = Calculator.getInstance();
		super();
		
		recHandler = recHandlerRef;
		catHandler = catHandlerRef;
		notifyee = notifyeeRef;
		
		categories = catHandler.getAllCategories();
		this.initFields();
		isEdit = false;
	}
	
	/**
	 * Create a form of the existing record
	 * @param recHandlerRef RecordHandler reference to manage records
	 * @param catHandlerRef CategoryHandler reference to manage categories
	 * @param record IncomeRecord object to be edit
	 */
	public IncomeForm(
			RecordHandler recHandlerRef, 
			CategoryHandler<IncomeRecord> catHandlerRef,
			UpdateNotifyee notifyeeRef,
			IncomeRecord record) {
		
		this(recHandlerRef, catHandlerRef, notifyeeRef);
		this.record = record;
		isEdit = true;
		this.populateFields();
	}
	
	/**
	 * To populate all the fields with the given record's data
	 */
	private void populateFields() {
		blockAutoFill = true;
		// Name
		if(isEdit && !txtName.getText().equals(record.getName())){
			txtName.setText(record.getName());
		}
		
		// Amount
		this.setAmt(record.getAmount());
		
		// Category
		cboxCat.setSelectedIndex(categories.indexOf(record.getCategory()));
		
		// Date
		txtDateChooser.setDate(isEdit ? record.getDate() : new Date());
		
		// Description
		txtDesc.setText(record.getRemark());
		
		// TODO: Recurring Records
		
		blockAutoFill = false;
	}
	
	/** Initiate all Form fields */
	private void initFields() {
		
		/* The Layout governing the positions */
		SpringLayout loForm = new SpringLayout();
		this.setLayout(loForm);
		
		lblName = this.createLabel("Name");
		txtName = new JTextField("");
		txtName.setToolTipText("Short name to name this record");
		txtName.setPreferredSize(new Dimension(200, 25));
		defaultTFBorder = txtName.getBorder();
		txtName.getDocument().addDocumentListener(new DocumentListener(){

			@Override
			public void changedUpdate(DocumentEvent arg0) {
				fill();
			}

			@Override
			public void insertUpdate(DocumentEvent arg0) {
				fill();
			}

			@Override
			public void removeUpdate(DocumentEvent arg0) {
				fill();
			}
			
			private void fill(){
				if(blockAutoFill || isEdit)return;
				IncomeRecord oldRecord = recHandler.lastIncomeRecord(txtName.getText()); 
				if(oldRecord!=null) {
					record = oldRecord;
					populateFields();
				}
			}
			
		});
		txtName.addFocusListener(new FocusListener() {

			@Override
			public void focusGained(FocusEvent arg0) {
				txtName.selectAll(); 
			}

			@Override
			public void focusLost(FocusEvent e) {
				// TODO Validate name field
			}
			
		});
		this.add(lblName);
		this.add(txtName);
		loForm.putConstraint(SpringLayout.WEST, lblName, COL1_PAD, SpringLayout.WEST, this);
		loForm.putConstraint(SpringLayout.WEST, txtName, COL2_PAD, SpringLayout.WEST, this);
		loForm.putConstraint(SpringLayout.NORTH, lblName, TOP_PAD>>2, SpringLayout.NORTH, this);
		loForm.putConstraint(SpringLayout.NORTH, txtName, TOP_PAD>>2, SpringLayout.NORTH, this);
		
		lblCat = this.createLabel("Category");
		cboxCat = new JComboBox();
		cboxCat.setPreferredSize(new Dimension(200, 25));
		defaultCBBorder = cboxCat.getBorder();
		this.populateCategories();
		cboxCat.setEditable(true);
		this.add(lblCat);
		this.add(cboxCat);
		loForm.putConstraint(SpringLayout.WEST, lblCat, COL1_PAD, SpringLayout.WEST, this);
		loForm.putConstraint(SpringLayout.WEST, cboxCat, COL2_PAD, SpringLayout.WEST, this);
		loForm.putConstraint(SpringLayout.NORTH, lblCat, TOP_PAD, SpringLayout.NORTH, lblName);
		loForm.putConstraint(SpringLayout.NORTH, cboxCat, TOP_PAD, SpringLayout.NORTH, txtName);
		
		lblAmt = this.createLabel("Amount");
		txtAmt = new JTextField("");
		txtAmt.setPreferredSize(new Dimension(200, 25));
		txtAmt.setToolTipText("Enter Amount Here!");
		
		this.add(lblAmt);
		this.add(txtAmt);
		loForm.putConstraint(SpringLayout.WEST, lblAmt, COL1_PAD, SpringLayout.WEST, this);
		loForm.putConstraint(SpringLayout.WEST, txtAmt, COL2_PAD, SpringLayout.WEST, this);
		loForm.putConstraint(SpringLayout.NORTH, lblAmt, TOP_PAD, SpringLayout.NORTH, lblCat);
		loForm.putConstraint(SpringLayout.NORTH, txtAmt, TOP_PAD, SpringLayout.NORTH, cboxCat);
		
		/* Calculator begins here */
		final JLabel lblResult = this.createLabel("");
		this.add(lblResult);
		loForm.putConstraint(SpringLayout.WEST, lblResult, COL1_PAD, SpringLayout.EAST, txtAmt);
		loForm.putConstraint(SpringLayout.NORTH, lblResult, TOP_PAD, SpringLayout.NORTH, cboxCat);
		txtAmt.getDocument().addDocumentListener(new DocumentListener() {

			@Override
			public void changedUpdate(DocumentEvent arg0) {
				evaluate(lblResult);
			}

			@Override
			public void insertUpdate(DocumentEvent arg0) {
				evaluate(lblResult);
			}

			@Override
			public void removeUpdate(DocumentEvent arg0) {
				evaluate(lblResult);
			}			
		});
		
		txtAmt.addFocusListener(new FocusListener() {

			@Override
			public void focusGained(FocusEvent e) {
				evaluate(lblResult);
				txtAmt.selectAll();
			}

			@Override
			public void focusLost(FocusEvent e) {
				evaluate(lblResult);
			}
			
		});
		
		lblDate = this.createLabel("Date");
		// JDateChooser stuff starts here (tingzhe)
		txtDateChooser = new JDateChooser(new Date());
		txtDateChooser.getJCalendar().setTodayButtonVisible(true);
		txtDateChooser.setDateFormatString("dd/MM/yyyy");
		txtDateChooser.setMaxSelectableDate(new Date());
		PropertyChangeListener calendarChangeListener  = new PropertyChangeListener() {
	        @Override
	        public void propertyChange(PropertyChangeEvent evt) {
	            Date selectedDate = ((JCalendar)evt.getSource()).getDate();
	            // TODO: selectedDate seems to be redundant?
	        }
	    };
	    txtDateChooser.getJCalendar().addPropertyChangeListener("calendar",calendarChangeListener);
		txtDateChooser.setPreferredSize(new Dimension(200, 25));
		
	    // jDateChooser stuff ends here (tingzhe)
		//txtDate = new JFormattedTextField(new SimpleDateFormat("dd/MM/yyyy"));
		//txtDate.setMargin(new Insets(0, 10, 0, 10));
		//txtDate.setValue(new Date());
		this.add(lblDate);
		this.add(txtDateChooser);
		loForm.putConstraint(SpringLayout.WEST, lblDate, COL1_PAD, SpringLayout.WEST, this);
		loForm.putConstraint(SpringLayout.WEST, txtDateChooser, COL2_PAD, SpringLayout.WEST, this);
		loForm.putConstraint(SpringLayout.NORTH, lblDate, TOP_PAD, SpringLayout.NORTH, lblAmt);
		loForm.putConstraint(SpringLayout.NORTH, txtDateChooser, TOP_PAD, SpringLayout.NORTH, txtAmt);
		
		lblDesc = this.createLabel("Remarks");
		txtDesc = new JTextArea("");
		txtDesc.setPreferredSize(new Dimension(200, 100));
		txtDesc.setBorder(defaultTFBorder);
		txtDesc.setWrapStyleWord(true);
		txtDesc.setLineWrap(true);
		this.add(lblDesc);
		this.add(txtDesc);
		loForm.putConstraint(SpringLayout.WEST, lblDesc, COL1_PAD, SpringLayout.WEST, this);
		loForm.putConstraint(SpringLayout.WEST, txtDesc, COL2_PAD, SpringLayout.WEST, this);
		loForm.putConstraint(SpringLayout.NORTH, lblDesc, TOP_PAD, SpringLayout.NORTH, lblDate);
		loForm.putConstraint(SpringLayout.NORTH, txtDesc, TOP_PAD, SpringLayout.NORTH, txtDateChooser);
		
		manageFocus();
	}
	
	private void manageFocus() {
		// Request focus in txtName
		txtName.requestFocusInWindow();
		// TODO: Bind Enter to change focus to the next field
		// TODO: Validate on "Enter"
	}
	
	/**
	 * Validates the fields entered into the system.
	 * @return true is there is no problem with inputs, else false;
	 */
	public boolean validateFields() {
		boolean validateSuccess = true;
		StringBuilder errMsg = new StringBuilder();
		
		if(!validateName(errMsg)) {
			this.markErr(txtName);
			validateSuccess = false;
		}
		else {
			this.unmarkErr(txtName);
		}
		
		if(!validateAmt(errMsg)) {
			this.markErr(txtAmt);
			validateSuccess = false;
		}
		else {
			this.unmarkErr(txtAmt);
		}
		
		if(!validateDate(errMsg)) {
			validateSuccess = false;
		}
		
		if(!validateCategory(errMsg)) {
			this.markErr(cboxCat);
			validateSuccess = false;
		}
		else {
			this.unmarkErr(cboxCat);
		}
	
		if(!validateDescription(errMsg)) {
			this.markErr(txtDesc);
			validateSuccess = false;
		}
		else {
			this.unmarkErr(txtDesc);
		}
		
		if(!validateSuccess) displayErr(errMsg.toString());
		return validateSuccess;
	}
	
	@Override
	public Record save() {
		IncomeRecord iRecord = null;
		try {
			iRecord = new IncomeRecord(
					evaluate(), 
					this.getName(), 
					this.getDesc(), 
					this.getDate(), 
					this.getCat()
				);
			if(isEdit) {
				this.recHandler.modifyRecord(record.getId(), iRecord, isNewCategory());
			}
			else {
				iRecord = this.recHandler.createRecord(iRecord, isNewCategory());
			}
			notifyee.addUndoAction(createUndoAction(iRecord, isNewCategory()), isEdit ? "Edit Income" : "New Income");
			
			return iRecord;
			
		} 
		catch (EvaluationException e) {
			
		}
		return iRecord;
	}
	
	/**
	 * Create an action to undo what the user just did
	 * @param nRecord new IncomeRecord that user just created
	 * @param isNewCat true for creation of new category, otherwise false
	 * @return AbstractAction undo action
	 */
	private AbstractAction createUndoAction(final IncomeRecord nRecord, final boolean isNewCat) {
		return new AbstractAction() {
			
			@Override
			public void actionPerformed(ActionEvent event) {
				if(isEdit) {
					recHandler.modifyRecord(record.getId(), record, false); // Undo an edit.
				}
				else { // A new record
					recHandler.removeRecord(nRecord.getId()); // Remove the Record	
				}
				if(isNewCat) { 
					catHandler.removeCategory(nRecord.getCategory().getID());
				}
			}
		};
	}
}
	// End of segment: ezxpns\GUI\IncomeForm.java





	/**
	 * origin: ezxpns\GUI\LogoIcon.java
	 */

 */
@SuppressWarnings("serial")
public class LogoIcon extends JPanel {

	private final String LOGO_PATH = "src/images/logo.png"; 
	private ImageIcon logo;
	private JLabel lblLogo;
	
	public LogoIcon() {
		super(new java.awt.BorderLayout());
		logo = new ImageIcon(LOGO_PATH);
		lblLogo = new JLabel(logo);
		this.add(lblLogo, BorderLayout.CENTER);
//		System.out.println("Trying to create a logo :)");
	}
}

	// End of segment: ezxpns\GUI\LogoIcon.java





	/**
	 * origin: ezxpns\GUI\MainGUI.java
	 */

 */
@SuppressWarnings("serial")
public class MainGUI extends JFrame implements UpdateNotifyee {
	
//	private UIControl uiCtrl;
	
	/**
	 * The Undo Manager for EzXpns
	 */
	private UndoManager undoMgr;
	
	/**
	 * Main Navigator - the side bar
	 */
	private EzNavigator navi;
	
	/**
	 * Content Placeholder - the content display that gets switched
	 */
	private JLayeredPane panContent;
	
	/**
	 * Reference to the SavingsOverviewPanel on the Dash board
	 */
	private SavingsOverviewPanel panSavings;
	
	/**
	 * Reference to the OverviewPanel on the Dash board
	 */
	private OverviewPanel panOverview;
	
	/**
	 * Reference to the TargetOverviewPanel on the Dash board
	 */
	private TargetOverviewPanel panTarget;
	
	/**
	 * Reference to the SearchPanel 
	 */
	private SearchPanel panSearch;
	
	/**
	 * Reference to the CategoryManagerPanel - also the TargetManager
	 */
	private CategoryTargetPanel panCategory;
	
	/**
	 * Reference to the RecordsDisplayPanel on the Dash board
	 */
	private RecordsDisplayPanel panRecords;
	
	public MainGUI(
			NWSGenerator nwsGen,
			RecordHandler recHandler,
			SummaryGenerator sumGen, 
			TargetManager targetMgr, 
			UIControl uiCtrl,
			UndoManager undoMgr) {
		super();
		this.instantiateUI();
		this.undoMgr = undoMgr;
		
//		this.uiCtrl = uiCtrl;
		
		CardLayout contentMgr = new CardLayout();
		panContent = new JLayeredPane();
		panContent.setLayout(contentMgr);
		
		setLayout(new FormLayout(new ColumnSpec[] {
				FormFactory.PREF_COLSPEC,
				ColumnSpec.decode("pref:grow"),},
			new RowSpec[] {
				FormFactory.RELATED_GAP_ROWSPEC,
				RowSpec.decode("default:grow"),}));
		navi = new EzNavigator(uiCtrl, contentMgr, panContent);
		navi.setPreferredSize(new Dimension(180, 400));
		
		this.add(navi, "1, 2, fill, fill");
		
		JPanel homeContent = new JPanel();
		homeContent.setBorder(new EmptyBorder(5, 0, 10, 10));
		homeContent.setLayout(new GridLayout(2, 2, 15, 15));
		panOverview = new OverviewPanel(sumGen);
		homeContent.add(panOverview);
		
		// Targets Panel
		panTarget = new TargetOverviewPanel(targetMgr);
		homeContent.add(panTarget);
		
		// Savings Panel
		panSavings = new SavingsOverviewPanel(nwsGen);
		homeContent.add(panSavings);
		
		// Records Display Panel
		panRecords = new RecordsDisplayPanel(recHandler, uiCtrl, this);
		homeContent.add(panRecords);
		
		panContent.add(homeContent, NormalMenuOpt.DASHBD.toString());
		
		this.add(panContent, "2, 2, fill, fill");
		this.setVisible(true);
	}
	
	/**
	 * Instantiates the User Interface
	 */
	private void instantiateUI() {
		this.setBounds(0, 0, Config.DEFAULT_UI_WIDTH, Config.DEFAULT_UI_HEIGHT);
		this.setLocationRelativeTo(null);
		this.setLayout(new GridBagLayout());
		this.setLocationRelativeTo(null);
		this.setMinimumSize(new Dimension(Config.MIN_UI_WIDTH, Config.MIN_UI_HEIGHT));
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);
		this.setTitle("EzXpnz - the revolutionary next generation game changer-ish luxury classy high-end expense manager");
	}
	
	/**
	 * Loads the Category Panel
	 * @param expenseHandler CategoryHandler reference for ExpenseRecord
	 * @param incomeHandler CategoryHandler reference for IncomeRecord
	 * @param targetMgr TargetManager object reference to manage targets
	 */
	public void loadCategoryPanel(
			CategoryHandler<ExpenseRecord> expenseHandler, 
			CategoryHandler<IncomeRecord> incomeHandler, 
			TargetManager targetMgr) {
		if(panCategory==null) {
			panCategory = new CategoryTargetPanel(expenseHandler, incomeHandler, targetMgr, this);
			panContent.add(panCategory, NormalMenuOpt.CATMGR.toString());
		}
	}
	
	/**
	 * Loads the Search Panel
	 * @param searchHandler SearchHandler reference for searching Records
	 * @param display RecordListView reference for the display
	 * @param incomeHandler CategoryHandler reference for IncomeRecord
	 * @param expenseHandler CategoryHandler reference for ExpenseRecord
	 */
	public void loadSearchPanel(
			SearchHandler searchHandler, 
			RecordListView display, 
			CategoryHandler<IncomeRecord> incomeHandler, 
			CategoryHandler<ExpenseRecord> expenseHandler){
		if(panSearch == null) {
			panSearch = new SearchPanel(searchHandler, display, incomeHandler, expenseHandler);
			panContent.add(panSearch, NormalMenuOpt.SEARCH.toString());
		}
	}

	@Override
	public void updateAll() {
		panTarget.update();
		panSavings.update();
		panOverview.updateOverview();
		panOverview.validate();
		panCategory.reload();
		panSearch.reload();
		panRecords.update();
		navi.updateUndoBtn();
		this.validate();
	}

	@Override
	public void addUndoAction(AbstractAction action, String name) {
		navi.updateUndoBtn();
		undoMgr.add(action, name);
	}
}

	// End of segment: ezxpns\GUI\MainGUI.java





	/**
	 * origin: ezxpns\GUI\RecordDialog.java
	 */

 */
@SuppressWarnings("serial")
public class RecordDialog extends JDialog implements ActionListener {
	
	public static final int TAB_INCOME = 0011;
	public static final int TAB_EXPENSE = 1100;
	
	private RecordHandler recHandler;
	private CategoryHandler<IncomeRecord> incomeHandler;
	private CategoryHandler<ExpenseRecord> expenseHandler;
	private UpdateNotifyee notifyee;
	private boolean isEditing;
	
	private PanelMain panMain;
	private PanelOption panOpt;
	
	/**
	 * Generalized constructor for RecordFrame
	 * @param recHandlerRef RecordHandler reference to manage Records
	 * @param incomeHandlerRef CategoryHandler reference to manage Income Categories
	 * @param expenseHandlerRef CategoryHandler reference to manage Expense Categories
	 * @param payHandlerRef PayHandler reference to manage Payment Methods
	 * @param undoMgrRef UndoManager reference for managing undo actions
	 */
	public RecordDialog(
			JFrame homeRef,
			String title,
			RecordHandler recHandlerRef, 
			CategoryHandler<IncomeRecord> incomeHandlerRef, 
			CategoryHandler<ExpenseRecord> expenseHandlerRef,
			UpdateNotifyee notifyeeRef) {
		super(homeRef, title, true); /* Owner, Title, Modularity */
		recHandler = recHandlerRef;
		incomeHandler = incomeHandlerRef;
		expenseHandler = expenseHandlerRef;
		notifyee = notifyeeRef;
		isEditing = false;
		this.initFrame();
		
	}
	
	/**
	 * Constructor to specify the initial tab to be displayed
	 * @param recHandlerRef RecordHandler reference to manage Records
	 * @param incomeHandlerRef CategoryHandler reference to manage Income Categories
	 * @param expenseHandlerRef CategoryHandler reference to manage Expense Categories
	 * @param payHandlerRef PayHandler reference to manage Payment Methods
	 * @param undoMgrRef UndoManager reference for managing undo actions
	 * @param initTab use either TAB_INCOME or TAB_EXPENSE to indicate which tab to choose
	 */
	public RecordDialog(
			JFrame homeRef,
			RecordHandler recHandlerRef, 
			CategoryHandler<IncomeRecord> incomeHandlerRef, 
			CategoryHandler<ExpenseRecord> expenseHandlerRef,
			UpdateNotifyee notifyeeRef,
			int initTab) {
		
		this(homeRef, initTab == TAB_INCOME ? "EzXpns - New Income Record": "EzXpns - New Expense Record", recHandlerRef, incomeHandlerRef, expenseHandlerRef, notifyeeRef);
		this.initComponent();
		
		panMain.toggleIncomeTab(); // Fix
		panMain.toggleExpenseTab(); // Default
		
		// TODO: Refactor this bit
		/* This part may need refactoring to enums */
		switch(initTab) {
			case TAB_INCOME: 
				panMain.toggleIncomeTab();
				break;
			case TAB_EXPENSE:
				panMain.toggleExpenseTab();
			default:break;
		}
	}
	
	/**
	 * Constructor for editing an existing ExpenseRecord
	 * @param recHandlerRef RecordHandler reference for managing records
	 * @param expenseHandlerRef CategoryHandler reference for managing categories
	 * @param payHandlerRef PayHandler reference for managing payment methods
	 * @param undoMgrRef UndoManager reference for managing undo actions
	 * @param record existing ExpenseRecord to be edited
	 */
	public RecordDialog(
			JFrame homeRef,
			String title,
			RecordHandler recHandlerRef,
			CategoryHandler<ExpenseRecord> expenseHandlerRef,
			UpdateNotifyee notifyeeRef,
			ExpenseRecord record) {
		this(homeRef, title, recHandlerRef, null, expenseHandlerRef, notifyeeRef);
		isEditing = true;
		this.initComponent(record);
		
	}
	
	/**
	 * Constructor for editing an existing IncomeRecord
	 * @param recHandlerRef RecordHandler reference for managing records
	 * @param incomeHandlerRef CategoryHandler reference for managing categories
	 * @param undoMgrRef UndoManager reference for managing undo actions
	 * @param record existing IncomeRecord to be edited
	 */
	public RecordDialog(
			JFrame homeRef,
			String title,
			RecordHandler recHandlerRef, 
			CategoryHandler<IncomeRecord> incomeHandlerRef,
			UpdateNotifyee notifyeeRef,
			IncomeRecord record) {
		this(homeRef, title, recHandlerRef, incomeHandlerRef, null, notifyeeRef);
		isEditing = true;
		this.initComponent(record);
		
	}
	
	/**
	 * Initialize this frame with its properties
	 */
	private void initFrame() {
		this.getContentPane().setLayout(new BorderLayout(5, 5));
		
		this.setBounds(0, 0, Config.DEFAULT_DIALOG_WIDTH, Config.DEFAULT_DIALOG_HEIGHT);
		this.setLocationRelativeTo(null);
		this.setResizable(false);
		this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
	}
	
	/**
	 * Initialize this frame with its components
	 */
	private void initComponent() {
		panMain = new PanelMain(recHandler, incomeHandler, expenseHandler, notifyee);
		this.getContentPane().add(panMain, BorderLayout.CENTER);
		
		panOpt = new PanelOption(this);
		this.getContentPane().add(panOpt, BorderLayout.SOUTH);
		this.getRootPane().setDefaultButton(panOpt.getSaveBtn());
	}
	
	/**
	 * Initialize this frame with its components with the given ExpenseRecord
	 * @param record ExpenseRecord to be modified
	 */
	private void initComponent(ExpenseRecord record) {
		panMain = new PanelMain(recHandler, incomeHandler, expenseHandler, notifyee, record);
		this.getContentPane().add(panMain, BorderLayout.CENTER);
		
		panOpt = new PanelOption(this);
		this.getContentPane().add(panOpt, BorderLayout.SOUTH);
		this.getRootPane().setDefaultButton(panOpt.getSaveBtn());
	}
	
	/**
	 * Initialize this frame with its components with the given IncomeRecord
	 * @param record IncomeRecord to be modified
	 */
	private void initComponent(IncomeRecord record) {
		panMain = new PanelMain(recHandler, incomeHandler, expenseHandler, notifyee, record);
		this.getContentPane().add(panMain, BorderLayout.CENTER);
		
		panOpt = new PanelOption(this);
		this.getContentPane().add(panOpt, BorderLayout.SOUTH);
		this.getRootPane().setDefaultButton(panOpt.getSaveBtn());
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if(this.panOpt.getSaveBtn() == e.getSource()) { // Save button has been invoked.
			System.out.println("Saved invoked!");
			if(panMain.validateForm()) { // Invoke validation
				this.closeWin(panMain.save());
				return;
			}
			System.out.println("Validate Fail!");
			// TODO: Display why the validation failed back to user
		}
		
		if(this.panOpt.getCancelBtn() == e.getSource()) {
			this.closeWin();
		}
	}
	
	/**
	 * Closing the window - without editing
	 */
	public void closeWin() {
		WindowEvent wev = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        this.dispatchEvent(wev); // "Throw" Event
        this.dispose();
	}
	
	/**
	 * To close this window safely - in edit mode
	 */
	public void closeWin(Record record) {
		SuccessfulSaveEvent success = new SuccessfulSaveEvent(this, WindowEvent.WINDOW_CLOSING, record);
        // WindowEvent wev = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        this.dispatchEvent(success); // "Throw" Event
        this.dispose();
        // java.awt.Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(wev); // Don't seem to work
	}
}

/**
 * Modified WindowEvent to return the edited record
 *
 */
@SuppressWarnings("serial")
class SuccessfulSaveEvent extends WindowEvent {

	private Record saved;
	
	public SuccessfulSaveEvent(Window source, int id, Record savedRecord) {
		super(source, id);
		saved = savedRecord;
	}
	
	public Record getRecord() {
		return saved;
	}
}


/** Panel Containing the Form for user to fill up - to create new record */
@SuppressWarnings("serial")
class PanelMain extends JPanel {
	
	public final String CARD_EXPENSE = "Expenses";
	public final String CARD_INCOME = "Income";
	
	private ExpenseForm panExpense;
	private IncomeForm panIncome;
	// private PanelRecur panRecurOpt;
	private CardLayout loCard;
	private JPanel metroTabs, metroTabBtns, metroTabContent;
	private JButton mtabExpense, mtabIncome;
	
	/** 
	 * true for ExpenseRecord, otherwise false for IncomeRecord
	 */
	private boolean isExpense;
		
	/**
	 * Constructor for the main content panel for new record
	 * @param recHandlerRef reference to the record handler
	 * @param incomeHandlerRef reference to the income category handler
	 * @param expenseHandlerRef reference to the expense category handler
	 * @param payHandlerRef reference to the payment method handler
	 * @param undoMgrRef
	 */
	public PanelMain(
			RecordHandler recHandlerRef,
			CategoryHandler<IncomeRecord> incomeHandlerRef,
			CategoryHandler<ExpenseRecord> expenseHandlerRef,
			UpdateNotifyee notifyeeRef) {
		this.setLayout(new BorderLayout());
		this.isExpense = true;
		
		panExpense = new ExpenseForm(recHandlerRef, expenseHandlerRef, notifyeeRef);
		panIncome = new IncomeForm(recHandlerRef, incomeHandlerRef, notifyeeRef);
		this.initTabs();
		
		// Create Recurring options panel
		// panRecurOpt = new PanelRecur();
		// this.add(panRecurOpt, BorderLayout.SOUTH);
	}
	
	/**
	 * Constructor for the main content panel for editing of an existing ExpenseRecord
	 * @param recHandlerRef
	 * @param incomeHandlerRef
	 * @param expenseHandlerRef
	 * @param payHandlerRef
	 * @param undoMgrRef
	 * @param record ExpenseRecord to be edited
	 */
	public PanelMain(
			RecordHandler recHandlerRef, 
			CategoryHandler<IncomeRecord> incomeHandlerRef, 
			CategoryHandler<ExpenseRecord> expenseHandlerRef, 
			UpdateNotifyee notifyeeRef,
			ExpenseRecord record) {
		
		this.setLayout(new BorderLayout());
		this.isExpense = true;
		panExpense = new ExpenseForm(recHandlerRef, expenseHandlerRef, notifyeeRef, record);
		this.add(panExpense, BorderLayout.CENTER);
	}
	
	/**
	 * Constructor for the main content panel for editing of an existing IncomeRecord
	 * @param recHandlerRef
	 * @param incomeHandlerRef
	 * @param expenseHandlerRef
	 * @param payHandlerRef
	 * @param undoMgrRef
	 * @param record IncomeRecord to be edited
	 */
	public PanelMain(
			RecordHandler recHandlerRef, 
			CategoryHandler<IncomeRecord> incomeHandlerRef, 
			CategoryHandler<ExpenseRecord> expenseHandlerRef, 
			UpdateNotifyee notifyeeRef,
			IncomeRecord record) {
		this.setLayout(new BorderLayout());
		this.isExpense = false;
		panIncome = new IncomeForm(recHandlerRef, incomeHandlerRef, notifyeeRef, record);
		this.add(panIncome, BorderLayout.CENTER);
	}
	
	private void initTabs() {
		metroTabs = new JPanel(); // the main panel for keeping everything together
		metroTabs.setLayout(new BorderLayout());
		
		// Buttons to trigger
		metroTabBtns = new JPanel();
		metroTabBtns.setLayout(new GridLayout(1, 0, 15, 15));
		metroTabBtns.setOpaque(false);
		
		metroTabBtns.add(getExpenseTab());
		metroTabBtns.add(getIncomeTab());
		
//		metroTabs.add(metroTabBtns, BorderLayout.NORTH); // no need to show the tabs now
		
		metroTabContent = new JPanel();
		
		loCard = new CardLayout(15, 15);
		metroTabContent.setLayout(loCard);
		
		metroTabContent.add(panExpense, this.CARD_EXPENSE);
		metroTabContent.add(panIncome, this.CARD_INCOME);
		metroTabs.add(metroTabContent, BorderLayout.CENTER);
		
		loCard.show(metroTabContent, CARD_EXPENSE);
		
		// this.tabs.setMnemonicAt(); // setting keyboard shortcut
		this.add(metroTabs, BorderLayout.CENTER);
	}
	
	/**
	 * Retrieve the tab for the expenses
	 * @return JButton object of the initialized JButton for the expense tab
	 */
	private JButton getExpenseTab() {
		if(mtabExpense == null) {
			mtabExpense = new JButton(CARD_EXPENSE);
			mtabExpense.setFont(new Font("Segoe UI", 0, 24)); // #Font
			// mtabExpense.setBorderPainted(false);
			mtabExpense.setFocusPainted(false);
			mtabExpense.setContentAreaFilled(false);
			mtabExpense.addMouseListener(new MouseAdapter() {
				@Override
				public void mouseEntered(MouseEvent mEvent) { // Hover start
					JButton btn = (JButton) mEvent.getSource();
					btn.setForeground(Color.CYAN);
				}
				
				@Override
				public void mousePressed(MouseEvent mEvent) {
					toggleExpenseTab();
				}
				
				@Override
				public void mouseExited(MouseEvent mEvent) { // Hover end
					JButton btn = (JButton) mEvent.getSource();
					btn.setForeground(
							btn.isEnabled() ? Color.BLACK : Color.WHITE
						);
				}
			});
		}
		return mtabExpense;
	}
	
	/** 
	 * Retrieve the tab for the income
	 * @return JButton object of the initialized JButton for the income tab
	 */
	private JButton getIncomeTab() {
		if(mtabIncome == null) {
			mtabIncome = new JButton(CARD_INCOME);
			mtabIncome.setFont(new Font("Segoe UI", 0, 24)); // #Font
			// mtabIncome.setBorderPainted(false);
			mtabIncome.setFocusPainted(false);
			mtabIncome.setContentAreaFilled(false);
			mtabIncome.addMouseListener(new MouseAdapter() {
				public void mouseEntered(MouseEvent mEvent) { // Hover start
					JButton btn = (JButton) mEvent.getSource();
					btn.setForeground(Color.CYAN);
				}
				
				public void mousePressed(MouseEvent mEvent) {
					toggleIncomeTab();
				}
				
				public void mouseExited(MouseEvent mEvent) { // Hover end
					JButton btn = (JButton) mEvent.getSource();
					btn.setForeground(
							btn.isEnabled() ? Color.BLACK : Color.WHITE
						);
				}
			});
		}
		return mtabIncome;
	}
	
	/**
	 * Invoke the validation methods for either live screen
	 * @return true if successful, otherwise false
	 */
	public boolean validateForm() {
		return isExpense() ? panExpense.validateFields(): panIncome.validateFields();
	}
	
	/**
	 * Invoke the save method on either live screen
	 * @return the new Record object containing the user inputs.
	 */
	public Record save() {
		return isExpense ? panExpense.save() : panIncome.save();
	}
	
	/**
	 * To check if the current tab is the Expense Tab
	 * @return true if it is, otherwise false
	 */
	public boolean isExpense() {return isExpense;}
	

	/**
	 * Method to toggle to the tab for a new income record
	 */
	public void toggleIncomeTab() {
		if(isExpense) {
			loCard.show(metroTabContent, CARD_INCOME);
			// Indicate some difference to let user know that this tab is selected
			changeFocus(this.mtabIncome, this.mtabExpense);
			isExpense = false;
			return;
		}
	}
	
	/**
	 * Method to toggle to the tab for a new expense record
	 */
	public void toggleExpenseTab() {
		if(!isExpense) {
			loCard.show(metroTabContent, CARD_EXPENSE);
			// Indicate some difference to let user know that this tab is selected
			changeFocus(this.mtabExpense, this.mtabIncome);
			isExpense = true;
			return;
		}
	}
	
	/**
	 * Method to manage the look and feel of the tabs on focus and off focus
	 * @param toFocus the JButton to create focus
	 * @param rmFocus the JButton to remove focus
	 */
	private void changeFocus(JButton toFocus, JButton rmFocus) {
		toFocus.setBackground(Color.WHITE);
		toFocus.setContentAreaFilled(true);
		toFocus.setEnabled(false);
		toFocus.setBorder(BorderFactory.createLoweredBevelBorder());
		
		rmFocus.setContentAreaFilled(false);
		rmFocus.setForeground(Color.BLACK);
		rmFocus.setEnabled(true);
		rmFocus.setBorder(BorderFactory.createRaisedBevelBorder());
	}
}

/** Panel containing the options available to this frame */
@SuppressWarnings("serial")
class PanelOption extends JPanel {
	
	private JButton btnSave, btnCancel;
	
	public PanelOption(ActionListener listener) {
		// Automated layout - new FlowLayout()
		btnSave = new JButton("Save");
		
		btnCancel = new JButton("Discard");
		
		btnSave.addActionListener(listener);
		btnCancel.addActionListener(listener);
		
		this.add(btnSave);
		this.add(btnCancel);
	}
	
	public JButton getSaveBtn() {return this.btnSave;}
	public JButton getCancelBtn() {return this.btnCancel;}
}


/** 
 * Panel to store all the options pertaining to recurrence of a record
 */
@SuppressWarnings("serial")
class PanelRecur extends JPanel implements ActionListener {
	
	private JCheckBox chkRecur;
	private JComboBox cboxFrequency;
	private JTextField txtStart, txtEnd;
	
	/** To create a new recurring panel */
	public PanelRecur() {
		init();
	}
	
	/** Initiate the fields within */
	private void init() {
		chkRecur = new JCheckBox("Repeating Record");
		chkRecur.setBackground(Color.WHITE);
		chkRecur.addActionListener(this);
		chkRecur.setFont(new Font("Segoe UI", 0, 18)); // #Font)
		this.add(chkRecur);
		cboxFrequency = new JComboBox();
		cboxFrequency.setEditable(false);
		
		txtStart = new JTextField("Commence Date");
		txtStart.setEnabled(false);
		txtEnd = new JTextField("Terminate Date");
		txtEnd.setEnabled(false);
		this.add(txtStart);
		this.add(txtEnd);
	}
	
	/**
	 * To toggle the enabled-ability of the recurring options
	 */
	public void toggle() {
		if(this.chkRecur.isSelected()) {
			this.cboxFrequency.setEnabled(true);
			this.txtStart.setEnabled(true);
			this.txtEnd.setEnabled(true);
		}
		else {
			this.cboxFrequency.setEnabled(false);
			this.txtStart.setEnabled(false);
			this.txtEnd.setEnabled(false);
		}
	}
	
	/**
	 * To toggle the visibility of the recurring options
	 */
	public void toggleVisiblity() {
		if(this.chkRecur.isSelected()) {
			this.cboxFrequency.setVisible(true);
			this.txtStart.setVisible(true);
			this.txtEnd.setVisible(true);
		}
		else {
			this.cboxFrequency.setVisible(false);
			this.txtStart.setVisible(false);
			this.txtEnd.setVisible(false);
		}
	}
	
	/**
	 * Method to retrieve the entered starting date of the recurrence
	 */
	public void getStart() {}
	
	/**
	 * Method to retrieve the entered ending date of the recurrence
	 */
	public void getEnd() {}
	
	/**
	 * Method to retrieve the frequency of the recurrence
	 */
	public void getFrequency() {} // This would need an enum 
	
	/** Check if user indicate this to be a recurring record */
	public boolean isToRecur() { return this.chkRecur.isSelected(); }

	@Override
	public void actionPerformed(ActionEvent e) {this.toggle();}
}
	// End of segment: ezxpns\GUI\RecordDialog.java





	/**
	 * origin: ezxpns\GUI\RecordsDisplayPanel.java
	 */

 */
@SuppressWarnings("serial")
public class RecordsDisplayPanel extends JPanel{
	
	/**
	 * The default maximum records to be displayed
	 */
	public static final int DEFAULT_MAX_ONSCREEN = 20;
		
	private RecordsListerPanel panContent;
	private RecordHandler recHandler;
	private RecordListView.RecordEditor editor;
	
	/**
	 * Constructor to create a RecordDisplayPanel
	 * @param recHandlerRef The RecordHandler Object reference <br />that will be used to deal with the logic of handling records
	 */
	public RecordsDisplayPanel(
			RecordHandler recHandlerRef, 
			RecordListView.RecordEditor editorRef,
			UpdateNotifyee notifyee) {
		super(new BorderLayout());
		
		recHandler = recHandlerRef; // Receive Handler
		editor = editorRef;
		
		this.setBackground(Color.WHITE);
		
		panContent = new RecordsListerPanel(recHandler, editor, notifyee);
		this.add(panContent, BorderLayout.CENTER);
		
		this.loadRecords();
	}	
	
	/**
	 * Load Records from data storage
	 */
	private void loadRecords() {
		panContent.updateContent();
	}
	
	/**
	 * Updates the records that are displayed
	 */
	public void update(){
		this.loadRecords();
	}
}

@SuppressWarnings("serial")
// Panel to display all expenses
class RecordsListerPanel extends JPanel {
	
	private JLabel lblTitle;
	
	private List<Record> records;
	private RecordHandler recHandler;
	private RecordListView list;
	
	public RecordsListerPanel(RecordHandler recHandlerRef, RecordListView.RecordEditor editorRef, UpdateNotifyee notifyee) {
		this.recHandler = recHandlerRef;
		this.setLayout(new BorderLayout());
		this.add(getTitleLabel("Recent Records"), BorderLayout.NORTH);
		
		list = new RecordListView(editorRef, recHandlerRef, notifyee);
		this.add(new JScrollPane(list), BorderLayout.CENTER);
		list.setPreferredScrollableViewportSize(new Dimension(150, 150));
		
		updateContent();
	}
	
	/**
	 * Updates the content of the list display 
	 */
	public void updateContent(){
		this.initRecords();
		list.show(records);
	}
	
	/** 
	 * Initializes records from the data store
	 */
	private void initRecords() {
		this.records = recHandler.getRecords(RecordsDisplayPanel.DEFAULT_MAX_ONSCREEN);
	}
	
	/**
	 * Gets a label for the title
	 * @param txt String object of what to be written in the title
	 * @return a JLabel object reference to the label for title
	 */
	private JLabel getTitleLabel(String txt) {
		if(lblTitle == null) {
			lblTitle = new JLabel(txt);
			lblTitle.setHorizontalAlignment(JLabel.CENTER);
			lblTitle.setFont(new Font("Segoe UI", 0, 20));
		}
		return lblTitle;
	}
	
}
	// End of segment: ezxpns\GUI\RecordsDisplayPanel.java





	/**
	 * origin: ezxpns\GUI\UIControl.java
	 */

 */
public class UIControl implements RecordListView.RecordEditor {
	
	// JComponents
	// private HomeScreen homeScreen;
	private MainGUI home;
	private RecordDialog recWin;
	private ReportFrame reportWin;
	
	// Logical Components
	private SearchHandler findHandler;
	private RecordHandler recHandler;
	private CategoryHandler<IncomeRecord> inCatHandler;
	private CategoryHandler<ExpenseRecord> exCatHandler;
	private TargetManager targetMgr;
	private ReportGenerator rptGen;
	private SummaryGenerator sumGen;
	private UndoManager undoMgr;
	
	/**
	 * To create a UI Manager. 
	 * @param searchHandlerRef the reference to the search handling logic component
	 * @param recHandlerRef the reference to the record handling logic component
	 * @param incomeHandlerRef the reference to the income category handling logic component
	 * @param expenseHandlerRef the reference to the expense category handling logic component
	 * @param targetMgrRef the reference to the target management logic component
	 * @param rptGenRef the reference to the report generator logic component
	 * @param sumGenRef the reference to the summary generator logic component
	 */
	@SuppressWarnings("serial")
	public UIControl(
			SearchHandler searchHandlerRef, 
			RecordHandler recHandlerRef, 
			CategoryHandler<IncomeRecord> incomeHandlerRef, 
			CategoryHandler<ExpenseRecord> expenseHandlerRef,
			TargetManager targetMgrRef,
			ReportGenerator rptGenRef,
			SummaryGenerator sumGenRef,
			NWSGenerator nwsGen) {
		// UINotify.createPopUp("Welcome! Please wait while we load your previous records");
		// Handlers for the various places
		findHandler = searchHandlerRef;
		recHandler = recHandlerRef;
		inCatHandler = incomeHandlerRef;
		exCatHandler = expenseHandlerRef;
		targetMgr = targetMgrRef;
		rptGen = rptGenRef;
		sumGen = sumGenRef;
		undoMgr = new UndoManager();
		
		
		// homeScreen = new HomeScreen(this, recHandlerRef, targetMgr, undoMgr, sumGen, nwsGen);
		home = new MainGUI(nwsGen, recHandler, sumGen, targetMgr, this, undoMgr);
		
		undoMgr.setPostUndo(new AbstractAction(){

			@Override
			public void actionPerformed(ActionEvent arg0) {
				home.updateAll();
			}
			
		});
		
		home.loadCategoryPanel(expenseHandlerRef, incomeHandlerRef, targetMgrRef);
		home.loadSearchPanel(findHandler, new RecordListView(this, recHandler, home), inCatHandler, exCatHandler);
	}
	
	/**
	 * Display the main/home screen of EzXpns
	 */
	public void showHomeScreen() {
		if(!home.isVisible()) {
			home.setVisible(true);
		}
	}
	
	/**
	 * Closes the main/home screen of EzXpns
	 */
	public void closeHomeScreen() {
		if(home.isVisible()) {
			home.setVisible(false);
		}
	}
	
	/**
	 * Displays a new record handler window with the chosen tab
	 * <br />Use RecordFrame.TAB_INCOME or TAB_EXPENSE to choose
	 * @param recordType the type of new record Expense/Income 
	 */
	public void showRecWin(int recordType) {
		recWin = new RecordDialog(home, recHandler, inCatHandler, exCatHandler, home, recordType);
		recWin.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent wEvent) {
				try {
					home.updateAll();
				}
				catch(Exception e) {
					e.printStackTrace();
				}
			}
		});
		recWin.setVisible(true);
	}
	
	/**
	 * Display the record window - in edit mode
	 * @param record Record object to be edited
	 */
	public void showRecWin(Record record) {
		if(record instanceof ExpenseRecord) {
			ExpenseRecord expense = (ExpenseRecord) record;
			// recWin = new RecordDialog(homeScreen, recHandler, exCatHandler, payHandler, homeScreen, expense);
			recWin = new RecordDialog(home, "EzXpns - Edit Expense Record", recHandler, exCatHandler, home, expense);
		}
		else {
			IncomeRecord income = (IncomeRecord) record;
			// recWin = new RecordFrame(homeScreen, recHandler, inCatHandler, homeScreen, income);
			recWin = new RecordDialog(home, "EzXpns - Edit Income Record", recHandler, inCatHandler, home, income);
		}		
	}
	
//	/**
//	 * Displays the search handler window
//	 */
//	public void showSearchWin() {
//		if(searchWin == null) {
//			searchWin = new SearchFrame(
//						findHandler, 
//						new RecordListView(this, recHandler, home),
//						inCatHandler,
//						exCatHandler, 
//						payHandler
//					);
//		}
//		searchWin.setVisible(true);
//	}

	@Override
	public void edit(Record record, RecordListView display) {
		final RecordListView displayer = display; 
		showRecWin(record);
		recWin.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent wEvent) {
				if(wEvent instanceof SuccessfulSaveEvent) {
					// TODO: call the callback method in display
					SuccessfulSaveEvent success = (SuccessfulSaveEvent) wEvent;
					displayer.itemEdited(success.getRecord()); 
					home.updateAll();
				}
			}
		});
		recWin.setVisible(true);
	}
	
	/** 
	 * Displays the Report handler Window 
	 */
	public void showReportWin() {
		if(reportWin == null) {
			reportWin = new ReportFrame(rptGen);
			reportWin.addWindowListener(new WindowAdapter() {
				@Override
				public void windowClosing(WindowEvent wEvent) {
					home.updateAll();
					reportWin.dispose();
				}
			});
		}
		reportWin.setVisible(true);
	}
	
//	/**
//	 * Displays the Payment Method Manager Window
//	 */
//	public void showPayWin() {
//		payWin = new PaymentMethodFrame(payHandler);
//		payWin.addWindowListener(new WindowAdapter() {
//			@Override
//			public void windowClosing(WindowEvent wEvent) {
//				home.updateAll();
//				payWin.dispose();
//			}
//		});
//		payWin.setVisible(true);
//	}
	
	/**
	 * Retrieves the Undo Manager Object
	 * @return an UndoManager Object
	 */
	public UndoManager getUndoMgr() {
		return undoMgr;
	}
}

	// End of segment: ezxpns\GUI\UIControl.java





	/**
	 * origin: ezxpns\GUI\UINotify.java
	 */

 */
public class UINotify {

	private UINotify() {}
	
//	public static void createPopUp(String msg) {
//		PopMsg popup = new PopMsg(msg);
//		new Thread(popup).start();
//	}
	
//	public static void createErrMsg(String msg) {
//		PopMsg popup = new PopMsg(msg, PopMsg.ERR_MSG);
//		new Thread(popup).start();
//	}
	
	/**
	 * Invoke a JDialog to display error message
	 * @param parent The parent component that will host (be locked down) when this dialog appears
	 * @param msg Error message to be displayed
	 */
	public static void createErrMsg(JComponent parent, String msg) {
		JOptionPane.showMessageDialog(parent, msg, "Error", JOptionPane.ERROR_MESSAGE);
	}
}

/**
 * Pop Up Message that disappear after 5 seconds 
 */
@SuppressWarnings("serial")
class PopMsg extends JWindow implements Runnable {
		
	private final int TIMEOUT = 5000;
	private final int WIDTH = 250;
	private final int HEIGHT = 21;
	
	private JLabel lblMsg;
	
	public static final int ERR_MSG = 01;
	
	public PopMsg(String msg) {
		this.setSize(WIDTH, HEIGHT);
		this.setLayout(new BorderLayout());
		this.setLocationRelativeTo(null);
		
		lblMsg = new JLabel("     " + msg);
		lblMsg.setFont(Config.TEXT_FONT);
		lblMsg.setBounds(5, 5, WIDTH-50, HEIGHT);
		this.add(lblMsg, BorderLayout.CENTER);
		
		JButton btnClose = new JButton("[X]");
		btnClose.addActionListener(new ActionListener() {
	        @Override
	        public void actionPerformed(final ActionEvent e) {
	               dispose();
	        }
		});
		btnClose.setContentAreaFilled(false);
		btnClose.setMargin(new Insets(1, 4, 1, 4));
		btnClose.setFocusable(false);
		
		this.add(btnClose, BorderLayout.EAST);
	}
	
	public PopMsg(String msg, int errType) {
		this(msg);
		lblMsg.setForeground(Color.RED);
	}

	@Override
	public void run() {
		try {
			this.setAlwaysOnTop(true);
			this.setVisible(true);
			Thread.sleep(TIMEOUT); // time after which pop up will be disappeared.
			this.dispose();
		} 
		catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
}

/* 	
	Faking a pop up :)
	
	JWindow jWin = new JWindow();
	jWin.getContentPane().add(new JLabel("hello world!"));
	jWin.setSize(800,600);
	jWin.setLocationRelativeTo(null);
	jWin.setVisible(true);
	
	String message = "You got a new notification message. Isn't it awesome to have such a notification message.";
	String header = "This is header of notification message";
	JFrame frame = new JFrame();
	frame.setSize(300,125);
	frame.setLayout(new GridBagLayout());
	GridBagConstraints constraints = new GridBagConstraints();
	constraints.gridx = 0;
	constraints.gridy = 0;
	constraints.weightx = 1.0f;
	constraints.weighty = 1.0f;
	constraints.insets = new Insets(5, 5, 5, 5);
	constraints.fill = GridBagConstraints.BOTH;
	JLabel headingLabel = new JLabel(header);
	headingLabel .setIcon(headingIcon); // --- use image icon you want to be as heading image.
	headingLabel.setOpaque(false);
	frame.add(headingLabel, constraints);
	constraints.gridx++;
	constraints.weightx = 0f;
	constraints.weighty = 0f;
	constraints.fill = GridBagConstraints.NONE;
	constraints.anchor = GridBagConstraints.NORTH;
	JButton cloesButton = new JButton("X")(new AbstractAction("x") {
        @Override
        public void actionPerformed(final ActionEvent e) {
               frame.dispose();
        }
	});
	cloesButton.setMargin(new Insets(1, 4, 1, 4));
	cloesButton.setFocusable(false);
	frame.add(cloesButton, constraints);
	constraints.gridx = 0;
	constraints.gridy++;
	constraints.weightx = 1.0f;
	constraints.weighty = 1.0f;
	constraints.insets = new Insets(5, 5, 5, 5);
	constraints.fill = GridBagConstraints.BOTH;
	JLabel messageLabel = new JLabel("<HtMl>"+message);
	frame.add(messageLabel, constraints);
	frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
	frame.setUndecorated(true);
	frame.setAlwaysOnTop(true);
	frame.setVisible(true);

	// Disappear after a while
	new Thread(){
      @Override
      public void run() {
           try {
                  Thread.sleep(5000); // time after which pop up will be disappeared.
                  frame.dispose();
           } catch (InterruptedException e) {
                  e.printStackTrace();
           }
      };
	}.start();

	// Setting the location of the window
	Dimension scrSize = Toolkit.getDefaultToolkit().getScreenSize();// size of the screen
	Insets toolHeight = Toolkit.getDefaultToolkit().getScreenInsets(frame.getGraphicsConfiguration());// height of the task bar
	frame.setLocation(scrSize.width - frame.getWidth(), scrSize.height - toolHeight.bottom - frame.getHeight());
	// Multiple popups
	frame.setLocation(scrSize.width - frame.getWidth(), scrSize.height - toolHeight.bottom - (frame.getHeight() * (n+1)));
*/
	// End of segment: ezxpns\GUI\UINotify.java





